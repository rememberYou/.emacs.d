#+AUTHOR: Terencio Agozzino
#+TITLE: GNU Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./config.el :mkdirp yes

* Table of Content                                                      :TOC:
- [[#about][About]]
- [[#emacs-initialization][Emacs Initialization]]
  - [[#packages-sources][Packages Sources]]
  - [[#package-configurations][Package Configurations]]
- [[#start-up][Start Up]]
  - [[#authentication][Authentication]]
  - [[#defaults][Defaults]]
  - [[#xdg-base-directory-specification][XDG Base Directory Specification]]
  - [[#customizations][Customizations]]
  - [[#fonts][Fonts]]
  - [[#lsp][LSP]]
  - [[#theme][Theme]]
  - [[#remove-mouse-interface][Remove Mouse Interface]]
- [[#minibuffer-completion][Minibuffer Completion]]
- [[#file-management][File Management]]
- [[#window-management][Window Management]]
- [[#programming-languages-and-tools][Programming Languages and Tools]]
  - [[#c][C++]]
  - [[#cmake][CMake]]
  - [[#csv][CSV]]
  - [[#dart-and-flutter][Dart and Flutter]]
  - [[#dockerfile][Dockerfile]]
  - [[#html][HTML]]
  - [[#ini][INI]]
  - [[#java][Java]]
  - [[#javascript][JavaScript]]
  - [[#json][JSON]]
  - [[#latex][LaTeX]]
  - [[#lua][Lua]]
  - [[#markdown][Markdown]]
  - [[#php][PHP]]
  - [[#plantuml][PlantUML]]
  - [[#python][Python]]
  - [[#shell-script][Shell-script]]
  - [[#sql][SQL]]
  - [[#style-sheet][Style Sheet]]
  - [[#typescript][TypeScript]]
  - [[#xml][XML]]
  - [[#vuejs][Vue.js]]
  - [[#yaml][YAML]]
  - [[#yarn][Yarn]]
- [[#advanced-configuration][Advanced Configuration]]
  - [[#alert][Alert]]
  - [[#auto-completion][Auto-Completion]]
  - [[#backups][Backups]]
  - [[#browser][Browser]]
  - [[#buffers][Buffers]]
  - [[#calculator][Calculator]]
  - [[#calendar][Calendar]]
  - [[#dashboard][Dashboard]]
  - [[#editorconfig][EditorConfig]]
  - [[#ending-up][Ending Up]]
  - [[#epub][EPUB]]
  - [[#helpful][Helpful]]
  - [[#spelling][Spelling]]
  - [[#history][History]]
  - [[#highlight-indentation][Highlight indentation]]
  - [[#hydra][Hydra]]
  - [[#general][General]]
  - [[#icons][Icons]]
  - [[#irc][IRC]]
  - [[#circe][Circe]]
  - [[#ledger][Ledger]]
  - [[#linters][Linters]]
  - [[#mails][Mails]]
  - [[#navigation][Navigation]]
  - [[#network][Network]]
  - [[#parentheses][Parentheses]]
  - [[#paste][Paste]]
  - [[#pdf][PDF]]
  - [[#point-and-region][Point and Region]]
  - [[#projectile][Projectile]]
  - [[#recent-files][Recent Files]]
  - [[#requests][Requests]]
  - [[#revealjs][Reveal.js]]
  - [[#version-control][Version Control]]
  - [[#whitespaces][Whitespaces]]
  - [[#word-wrap][Word Wrap]]
  - [[#yasnippet][YASnippet]]
- [[#org-mode][Org-Mode]]
  - [[#agenda][Agenda]]
  - [[#bullets][Bullets]]
  - [[#capture][Capture]]
  - [[#clock][Clock]]
  - [[#contacts][Contacts]]
  - [[#faces][Faces]]
  - [[#encryption--decryption][Encryption / Decryption]]
  - [[#journal][Journal]]
  - [[#languages][Languages]]

* About

After using GNU Emacs for a while, I decided to create my own config to simplify
my daily life by adding scripts and useful functions. For more informations
about myself, you can visit my [[https://rememberyou.github.io/][website]].

To manage package configurations, I use the [[https://github.com/jwiegley/use-package/][use-package]] package from John
Wiegley, that I recommend.

This configuration is mainly based on the following user configurations:
- [[https://github.com/daviwil/dotfiles/blob/master/Emacs.org][David Wilson]] (=daviwil=);
- [[https://github.com/jwiegley/dot-emacs/][John Wiegley]] (=jwiegley=);
- [[https://github.com/angrybacon/dotemacs][Mathieu Marques]] (=angrybacon=);
- [[https://github.com/sachac][Sacha Chua]] (=sachac=).

Thanks to them for their incredible work!

* Emacs Initialization

This section contains the basic commands you need to know to properly initialize
your GNU Emacs.

** Packages Sources

To install packages, it is useful to configure the package sources.

#+begin_src emacs-lisp
  (setq package-archives '(("elpa" . "https://elpa.gnu.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")
                           ("org" . "http://orgmode.org/elpa/")))
#+end_src

** Package Configurations

To manage the package configurations with =use-package=, you must install it with the following snippet code

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (use-package delight :ensure t)
  (use-package use-package-ensure-system-package :ensure t)
#+end_src

* Start Up

This section contains some more advanced commands to customize your GNU Emacs.

** Authentication

I mainly use [[https://www.passwordstore.org/][pass]] under GNU Linux as password manager. However, I prefer to
store IRC and email passwords directly in an =authinfo.gpg= file for
simplicity. Afterward, this encrypted file is placed in [[https://github.com/syncthing/syncthing][Syncthing]] to be able to
easily use my configuration on other devices.

#+begin_src emacs-lisp
  (use-package auth-source
    :ensure nil
    :custom
    (auth-sources '("~/.config/gnupg/shared/authinfo.gpg"
                    "~/.authinfo.gpg"
                    "~/.authinfo"
                    "~/.netrc")))
#+end_src

** Defaults

For a better user experience of GNU Emacs, here are the default values that I use.

#+begin_src emacs-lisp
  (setq-default
   ad-redefinition-action 'accept                   ; Silence warnings for redefinition
   cursor-in-non-selected-windows t                 ; Hide the cursor in inactive windows
   display-time-default-load-average nil            ; Don't display load average
   fill-column 80                                   ; Set width for automatic line breaks
   help-window-select t                             ; Focus new help windows when opened
   indent-tabs-mode nil                             ; Prefer spaces over tabs
   inhibit-startup-screen t                         ; Disable start-up screen
   initial-scratch-message ""                       ; Empty the initial *scratch* buffer
   kill-ring-max 128                                ; Maximum length of kill ring
   load-prefer-newer t                              ; Prefer the newest version of a file
   mark-ring-max 128                                ; Maximum length of mark ring
   read-process-output-max (* 1024 1024)            ; Increase the amount of data reads from the process
   scroll-conservatively most-positive-fixnum       ; Always scroll by one line
   select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
   tab-width 4                                      ; Set width for tabs
   use-package-always-ensure t                      ; Avoid the :ensure keyword for each package
   user-full-name "Terencio Agozzino"               ; Set the full name of the current user
   user-mail-address "terencio.agozzino@gmail.com"  ; Set the email address of the current user
   vc-follow-symlinks t                             ; Always follow the symlinks
   view-read-only t)                                ; Always open read-only buffers in view-mode
  (cd "~/")                                         ; Move to the user directory
  (column-number-mode 1)                            ; Show the column number
  (fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
  (global-hl-line-mode)                             ; Hightlight current line
  (set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
  (show-paren-mode 1)                               ; Show the parent
#+end_src

** XDG Base Directory Specification

To keep the user's home and the =~/.emacs.d= folder as clean as possible, I
follow the [[https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html][XDG base directory specification]]. Be careful that GNU Emacs will not
create the appropriate folders if they do not exist. Therefore, it is necessary
to create them yourself.

#+begin_src shell
  mkdir ~/.cache/emacs ~/.local/share/emacs/
#+end_src

*NOTE:* you can find out more by going to my [[https://github.com/rememberYou/dotfiles][dotfiles]].

#+begin_src emacs-lisp
  (defvar xdg-bin (getenv "XDG_BIN_HOME")
    "The XDG bin base directory.")

  (defvar xdg-cache (getenv "XDG_CACHE_HOME")
    "The XDG cache base directory.")

  (defvar xdg-config (getenv "XDG_CONFIG_HOME")
    "The XDG config base directory.")

  (defvar xdg-data (getenv "XDG_DATA_HOME")
    "The XDG data base directory.")

  (defvar xdg-lib (getenv "XDG_LIB_HOME")
    "The XDG lib base directory.")
#+end_src

** Customizations

To avoid overloading the GNU Emacs customization =init.el= file made with the UI,
I add the generated code in a separate file.

#+begin_src emacs-lisp
  (use-package cus-edit
    :ensure nil
    :custom (custom-file (expand-file-name (format "%s/emacs/custom.el" xdg-data)))
    :config
    (when (file-exists-p custom-file)
      (load custom-file t)))
#+end_src

** Fonts

Spending most of our time on GNU Emacs, it is important to use a font that will
make our reading easier. [[https://github.com/adobe-fonts/source-code-pro][Source Code Pro]] is one of the best monospaced font.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Source Code Pro")
  (set-fontset-font t 'latin "Noto Sans")
#+end_src

Do not forget to install this font with your system manager and to check the
font installation.

#+begin_src shell
  fc-list | grep "Source Code Pro"
#+end_src

** LSP

The main benefit of using Language Server Protocol (LSP) to configure the
management of your programming languages is that LSP servers are also used by
other text editors, increasing contributions to these packages. What could be
better than benefiting from the larger community, while keeping a quality text
editor ;-)

We need a Language Server Protocol (LSP) client to use different LSP servers
according to the programming languages that we would like to use. That's where
[[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] comes in!

#+begin_src emacs-lisp
   (use-package lsp-mode
     :commands (lsp lsp-deferred)
     :hook ((prog-mode . lsp-deferred)
            (lsp-mode . lsp-enable-which-key-integration))
     :custom
     (lsp-enable-folding nil)
     (lsp-enable-links nil)
     (lsp-enable-snippet nil)
     (lsp-keymap-prefix "C-c ;")
     (lsp-session-file (expand-file-name (format "%s/emacs/lsp-session-v1"  xdg-data)))
     (read-process-output-max (* 1024 1024)))
#+end_src

In addition to =lsp-mode=, it is possible to use =lsp-ui= to get additional
information (e.g., documentation) when hovering a variable or a function.

#+begin_src emacs-lisp
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode))
#+end_src

When using =lsp=, it is likely that you will encounter programming errors. To
navigate through these errors via the minibuffer, you can use a package for
that. If like me, you use =consult= with your minibuffer completion, then
=consult-lsp= is made for you.

#+begin_src emacs-lisp
  (use-package consult-lsp
    :commands (consult-lsp-diagnostics consult-lsp-symbols))
#+end_src

Finally, if like me you need a debugger, [[https://github.com/emacs-lsp/dap-mode][dap-mode]] uses the Debug Adapter
Protocol wire protocol for communication between client and Debug Server. You
won't find a better debugger.

#+begin_src emacs-lisp
  (use-package dap-mode
    :after lsp-mode
    :config
    (dap-mode t)
    (dap-ui-mode t))
#+end_src

** Theme

I am a fan of [[https://github.com/ChrisKempson/Tomorrow-Theme][tomorrow-night]] and combined with [[https://github.com/seagle0128/doom-modeline][doom-modeline]] it's happiness! To
get icons in the =doom-modeline=, you will need to install the icons with
[[#Icons][all-the-icons]].

#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (load-theme 'doom-tomorrow-night t)
    (doom-themes-org-config))

  (use-package doom-modeline
    :hook (after-init . doom-modeline-init)
    :custom (doom-modeline-icon (display-graphic-p)))
#+end_src


Since we do not do things by halves, it is also interesting to visually
differentiate "real" buffers (e.g., buffers that contain our work) from "unreal"
buffers (e.g., popups) by giving the latter a darker color. From then on,
[[https://github.com/hlissner/emacs-solaire-mode][solar-mode]] is the ideal package.

#+begin_src emacs-lisp
  (use-package solaire-mode
    :defer 0.1
    :custom (solaire-mode-remap-fringe t)
    :config (solaire-global-mode))
#+end_src

** Remove Mouse Interface

If you have to use the mouse with GNU Emacs, you probably have the wrong text
editor. Let's remove all those menu items related to the mouse interface.

#+begin_src emacs-lisp
  (when window-system
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (tooltip-mode -1))
#+end_src

* Minibuffer Completion

Having a good minibuffer completion is important on GNU Emacs since it is one of
the elements we will frequently interact with. In the beginning I used [[https://github.com/emacs-helm/helm][helm]], but
I found it to be memory intensive for the few features I was using. From this
observation I switched to [[https://github.com/abo-abo/swiper][ivy]] for many years, which is a faster and a lighter
framework than =helm=. However, =ivy= is still a framework.

Since then, newer completion systems have emerged (e.g., [[https://github.com/minad/vertico][vertico]], [[https://github.com/minad/vertico][selectrum]],
and [[https://github.com/oantolin/icomplete-vertical][icomplete-vertical]]), designed to be optimized for a single task and nested
with other packages with the same vision. That's why I now use =vertico= instead
of =ivy=.

*NOTE*: =selectrum= is also a good alternative to =ivy=, but is less minimal than
=vertico=.

#+begin_src emacs-lisp
  (use-package vertico
    :init (vertico-mode)
    :custom (vertico-cycle t)
    :custom-face (vertico-current ((t (:background "#3a3f5a")))))
#+end_src

To enable richer annotations (e.g., summary documentation of the functions and
variables, as well as having the size and the last consultation of the files)
for minibuffer completions, [[https://github.com/minad/marginalia/][marginalia]] is awesome.

#+begin_src emacs-lisp
  (use-package marginalia
    :after vertico
    :init (marginalia-mode)
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)))
#+end_src

If like me you like to have icons associated with candidates, you can use
[[https://github.com/iyefrat/all-the-icons-completion][all-the-icons-completion]].

#+begin_src emacs-lisp
  (use-package all-the-icons-completion
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup))
#+end_src

By default, =vertico= sorts the candidates according to their history position,
then by length and finally by alphabetical. To improves searching across
completion (e.g., by filter expressions separated by spaces), you should
[[https://github.com/oantolin/orderless][orderless]] (or [[https://github.com/raxod502/prescient.el][prescient]]).

#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles . (partial-completion)))))
    (completion-styles '(orderless)))
#+end_src

There is nothing like a collection of commands to have additional
completions. [[https://github.com/minad/consult][consult]] provides this collection.

#+begin_src emacs-lisp
  (use-package consult
    :after projectile
    :bind  (;; Related to the control commands.
            ("<help> a" . consult-apropos)
            ("C-x b" . consult-buffer)
            ("C-x M-:" . consult-complex-command)
            ("C-c k" . consult-kmacro)
            ;; Related to the navigation.
            ("M-g a" . consult-org-agenda)
            ("M-g e" . consult-error)
            ("M-g g" . consult-goto-line)
            ("M-g h" . consult-org-heading)
            ("M-g i" . consult-imenu)
            ("M-g k" . consult-global-mark)
            ("M-g l" . consult-line)
            ("M-g m" . consult-mark)
            ("M-g o" . consult-outline)
            ("M-g I" . consult-project-imenu)
            ;; Related to the search and selection.
            ("M-s G" . consult-git-grep)
            ("M-s g" . consult-grep)
            ("M-s k" . consult-keep-lines)
            ("M-s l" . consult-locate)
            ("M-s m" . consult-multi-occur)
            ("M-s r" . consult-ripgrep)
            ("M-s u" . consult-focus-lines)
            ("M-s f" . consult-find))
    :custom
    (completion-in-region-function #'consult-completion-in-region)
    (consult-narrow-key "<")
    (consult-project-root-function #'projectile-project-root)
    ;; Provides consistent display for both `consult-register' and the register
    ;; preview when editing registers.
    (register-preview-delay 0)
    (register-preview-function #'consult-register-preview))
#+end_src

Finally, [[https://github.com/oantolin/embark/][embark]] is great if like me you like to interact directly with your
files (e.g., for renaming, deleting and copying) through your completion system
without having to go through =dired=.

#+begin_src emacs-lisp
  (use-package embark
    :bind ("C-." . embark-act))
#+end_src

* File Management

=dired= is a good file manager. To fine-tune its use, let's change some default
values.

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :delight "Dired "
    :custom
    (dired-auto-revert-buffer t)
    (dired-dwim-target t)
    (dired-hide-details-hide-symlink-targets nil)
    (dired-listing-switches "-alh --group-directories-first")
    (dired-ls-F-marks-symlinks nil)
    (dired-recursive-copies 'always))
#+end_src

To avoid =dired= to keep buffers, I use [[https://github.com/crocket/dired-single][dired-single]].

#+begin_src emacs-lisp
  (use-package dired-single
    :after dired
    :bind (:map dired-mode-map
                ([remap dired-find-file] . dired-single-buffer)
                ([remap dired-up-directory] . dired-single-up-directory)
                ("M-DEL" . dired-prev-subdir)))
#+end_src

By default, =dired= opens files in plain text. This behavior is sometimes
undesirable. Hopefully, [[https://github.com/Fuco1/dired-hacks/blob/master/dired-open.el][dired-open]] can be used to informs =dired= that certain
desired file extensions must be opened with external packages to GNU Emacs.

#+begin_src emacs-lisp
  (use-package dired-open
    :after (dired dired-jump)
    :custom (dired-open-extensions '(("mp4" . "mpv"))))
#+end_src

To know the type of file at a glance, [[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired]] integrates icons
directly into =dired=.

#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :if (display-graphic-p)
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

It is sometimes convenient to hide dotfiles. With [[https://github.com/mattiasb/dired-hide-dotfiles][dired-hide-dotfiles]] this
becomes possible.

#+begin_src emacs-lisp
  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :bind (:map dired-mode-map
                ("h" . dired-hide-dotfiles-mode)))
#+end_src

I like being able to =<TAB>= on a folder and see its contents, without me getting
into it. [[https://github.com/Fuco1/dired-hacks/blob/master/dired-subtree.el][dired-subtree]] allows this behavior.

#+begin_src emacs-lisp
  (use-package dired-subtree
    :after dired
    :bind (:map dired-mode-map
                ("<tab>" . dired-subtree-toggle)))
#+end_src

Sometimes you may have a folder with a large number of files. In this case,
[[https://github.com/Fuco1/dired-hacks/blob/master/dired-narrow.el][dired-narrow]] is useful to filter the files.

#+begin_src emacs-lisp
  (use-package dired-narrow
    :ensure nil
    :bind (("C-c C-n" . dired-narrow)
           ("C-c C-f" . dired-narrow-fuzzy)))
#+end_src

* Window Management

Most of the time, I want to split a window and put the focus on it to perform an
action. By default GNU Emacs does not give the focus to this new window. I have
no idea why this is not the default behavior, but we can easily set this
behavior.

#+begin_src emacs-lisp
  (use-package window
    :ensure nil
    :bind (("C-x 2" . vsplit-last-buffer)
           ("C-x 3" . hsplit-last-buffer)
           ;; Don't ask before killing a buffer.
           ([remap kill-buffer] . kill-this-buffer))
    :preface
    (defun hsplit-last-buffer ()
      "Gives the focus to the last created horizontal window."
      (interactive)
      (split-window-horizontally)
      (other-window 1))

    (defun vsplit-last-buffer ()
      "Gives the focus to the last created vertical window."
      (interactive)
      (split-window-vertically)
      (other-window 1)))
#+end_src

To maximize concentration, I prefer to only center individual windows and keep a
default behavior when multiple windows are present. [[https://github.com/anler/centered-window-mode][centered-window]] deals with
this behavior.

#+begin_src emacs-lisp
  (use-package centered-window
    :hook (after-init . centered-window-mode)
    :custom
    (cwm-centered-window-width 130)
    (cwm-frame-internal-border 0)
    (cwm-incremental-padding t)
    (cwm-incremental-padding-% 2)
    (cwm-left-fringe-ratio 0)
    (cwm-use-vertical-padding t))
#+end_src

The way I move between several windows in GNU Emacs is by indicating the number
of the window I want to move to. Most people use [[https://github.com/abo-abo/ace-window][ace-window]], but I prefer
[[https://github.com/dimitri/switch-window][switch-window]] which displays the window number while hiding its content. I find
this behavior more convenient than moving from window to window to get to the
one we are looking for.

#+begin_src emacs-lisp
  (use-package switch-window
    :bind (("C-x o" . switch-window)
           ("C-x w" . switch-window-then-swap-buffer)))
#+end_src

There are times when I would like to bring back a windows layout with their
content. With the =winner-undo= and =winner-redo= commands from the built-in =winner=
package, I can easily do that.

#+begin_src emacs-lisp
  (use-package winner
    :ensure nil
    :hook (after-init . winner-mode))
#+end_src

* Programming Languages and Tools

Section dedicated to the definition and customization of different programming
languages and their tools.

** C++

When I develop in C++ with GNU Emacs, I use the [[https://github.com/MaskRay/ccls][ccls]] LSP server. To use it,
do not forget to configure the LSP package and to install this LSP server through
=lsp-mode= or with your system package manager.

#+begin_src emacs-lisp
  (use-package ccls
    :after projectile
    :hook ((c-mode c++-mode objc-mode cuda-mode) . lsp-deferred)
    :custom
    (ccls-args nil)
    (ccls-executable (executable-find "ccls"))
    (projectile-project-root-files-top-down-recurring
     (append '("compile_commands.json" ".ccls")
             projectile-project-root-files-top-down-recurring))
    :config (add-to-list 'projectile-globally-ignored-directories ".ccls-cache"))
#+end_src

To allow =ccls= to know the dependencies of your =.cpp= files with your =.h=
files, it is important to provide an =compile.commands.json= file (or a =.ccls=
file) at the root of your project.

For this, nothing could be easier. If like me you use a =CMakeLists.txt= file for
all your C++ projects, then you just need to install the =cmake= package on your
operating system. From then on, the =compile.commands.json= file is generated with
the following commands:

#+begin_src shell
  cmake -H. -BDebug -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=YES
  ln -s Debug/compile_commands.json
#+end_src

Finally, if you follow [[https://google.github.io/styleguide/cppguide.html][Google's C/++ conventions]] like I do, the [[https://github.com/google/styleguide/blob/gh-pages/google-c-style.el][google-c-style]]
package changes some default values to ensure that you follow these conventions
as much as possible.

#+begin_src emacs-lisp
  (use-package google-c-style
    :hook (((c-mode c++-mode) . google-set-c-style)
           (c-mode-common . google-make-newline-indent)))
#+end_src

** CMake

CMake is a cross-platform build system generator. For its support with GNU
Emacs, the [[https://github.com/Kitware/CMake/blob/master/Auxiliary/cmake-mode.el][cmake-mode]] package with the installation of the [[https://emacs-lsp.github.io/lsp-mode/page/lsp-cmake/][cmake-language-server]]
LSP server is sufficient. To use it, do not forget to configure the LSP package
and to install this LSP server through =lsp-mode= or with your system package
manager.

#+begin_src emacs-lisp
  (use-package cmake-mode
    :hook (cmake-mode . lsp-deferred)
    :mode ("CMakeLists\\.txt\\'" "\\.cmake\\'"))
#+end_src

To better manage syntax colors, especially with respect to function arguments,
it is visually useful to install [[https://github.com/Lindydancer/cmake-font-lock][cmake-font-lock]].
#+begin_src emacs-lisp
  (use-package cmake-font-lock
    :hook (cmake-mode . cmake-font-lock-activate))
#+end_src

Finally, to compile with CMake in C++, I use [[https://github.com/atilaneves/cmake-ide/blob/master/cmake-ide.el][cmake-ide]], by indicating where the
=CMakeLists.txt= file is present in the project.

#+begin_src emacs-lisp
  (use-package cmake-ide
    :after projectile
    :init (cmake-ide-setup)
    :hook (c++-mode . my/cmake-ide-find-project)
    :preface
    (defun my/cmake-ide-find-project ()
      "Finds the directory of the project for cmake-ide."
      (with-eval-after-load 'projectile
        (setq cmake-ide-project-dir (projectile-project-root))
        (setq cmake-ide-build-dir (concat cmake-ide-project-dir "build")))
      (setq cmake-ide-compile-command
            (concat "cd " cmake-ide-build-dir " && cmake .. && make"))
      (cmake-ide-load-db))

    (defun my/switch-to-compilation-window ()
      "Switches to the *compilation* buffer after compilation."
      (other-window 1))
    :bind ([remap comment-region] . cmake-ide-compile)
    :config (advice-add 'cmake-ide-compile :after #'my/switch-to-compilation-window))
#+end_src

** CSV

For my viewing pleasure, =csv-mode= provides a color syntax when editing CSV
files.

#+begin_src emacs-lisp
  (use-package csv-mode :mode ("\\.\\(csv\\|tsv\\)\\'"))
#+end_src

** Dart and Flutter

For the few times I have to develop in Dart, [[https://github.com/bradyt/dart-mode][dart-mode]] with [[https://emacs-lsp.github.io/lsp-dart/][lsp-dart]] as server
LSP is great! To use it, do not forget to configure the LSP package and to
install =dart= with your system package manager.

#+begin_src emacs-lisp
  (use-package dart-mode
    :after projectile
    :mode "\\.dart\\'"
    :config
    (add-to-list 'projectile-project-root-files-bottom-up "pubspec.yaml")
    (add-to-list 'projectile-project-root-files-bottom-up "BUILD"))
#+end_src

To configure =lsp-dart=, nothing difficult. Remember to indicate the path to the
Dart SDK dir. Finally, if you use Flutter, do not forget to install it too with
your system package manager.

#+begin_src emacs-lisp
  (use-package lsp-dart
    :hook (dart-mode . lsp-deferred)
    :custom
    (lsp-dart-dap-flutter-hot-reload-on-save t)
    (lsp-dart-sdk-dir "/opt/flutter/bin/cache/dart-sdk/"))
#+end_src

** Dockerfile

I often use Docker with Dockerfile. To support it with LSP and GNU Emacs, the
package dockerfile-mode with [[dockerfile-language-server-nodejs][dockerfile-language-server-nodejs]] (=dockerfile-ls=)
as LSP server is enough. To use it, do not forget to configure the LSP package
and to install this LSP server through =lsp-mode= or with your system package
manager.

#+begin_src emacs-lisp
  (use-package dockerfile-mode :delight "δ " :mode "Dockerfile\\'")
#+end_src

** HTML

Rare are the times when I had to code in raw HTML. When it was the case, I used
the [[https://emacs-lsp.github.io/lsp-mode/page/lsp-html/][vscode-html-languageserver-bin]] (=html-ls=) LSP server with =html-mode=. To use
it, do not forget to configure the LSP package and to install this LSP server
through =lsp-mode= or with your system package manager. However, there are times
when I have to handle CSS and JavaScript directly in the HTML. For this reason,
I use [[https://github.com/fxbois/web-mode][web-mode]] while keeping the LSP server to benefit from =lsp-ui=.

** INI

To modify the INI files, you need to install the =ini-mode= package.

#+begin_src emacs-lisp
  (use-package ini-mode :mode "\\.ini\\'")
#+end_src

** Java

To have a fast and stable environment, I recommend using [[https://github.com/emacs-lsp/lsp-java][lsp-java]] as
LSP client and [[https://projects.eclipse.org/projects/eclipse.jdt.ls][Eclipse JDT Language Server]] as LSP server.

*NOTE:* before configuring =lsp-java=, don't forget to configure [[#lsp][lsp-mode]].

Let's define the LSP client to use the LSP server:

#+begin_src emacs-lisp
  (use-package lsp-java
    :hook (java-mode . (lambda ()
                         (require 'lsp-java)
                         (lsp-deferred)))
    :custom (lsp-java-server-install-dir
             (expand-file-name (format "%s/eclipse.jdt.ls/server" xdg-lib))))
#+end_src

*** Gradle

Most of my Java projects are made with =gradle=. The configuration is easy
enough:

#+begin_src emacs-lisp
  (use-package gradle-mode
    :mode ("\\.java\\'" "\\.gradle\\'")
    :bind (:map gradle-mode-map
                ("C-c C-c" . gradle-build)
                ("C-c C-t" . gradle-test))
    :preface
    (defun my/switch-to-compilation-window ()
      "Switches to the *compilation* buffer after compilation."
      (other-window 1))
    :config
    (advice-add 'gradle-build :after #'my/switch-to-compilation-window)
    (advice-add 'gradle-test :after #'my/switch-to-compilation-window))
#+end_src

** JavaScript

For my JavaScript configuration, I took my sources from the Nicolas Petton's
blog which I found very well explained.

[[https://emacs.cafe/emacs/javascript/setup/2017/04/23/emacs-setup-javascript.html][Setting up Emacs for JavaScript (part #1)]]
[[https://emacs.cafe/emacs/javascript/setup/2017/05/09/emacs-setup-javascript-2.html][Setting up Emacs for JavaScript (part #2)]]

I like to use [[https://prettier.io/][prettier]] to get my TypeScript code clean. To use it,
do not forget to install it with your package manager.

#+begin_src emacs-lisp
  (use-package prettier-js
    :delight
    :custom (prettier-js-args '("--print-width" "100"
                                "--single-quote" "true"
                                "--trailing-comma" "all")))
#+end_src

*** =js2-mode=

By default, GNU Emacs uses =js-mode= as major mode for JavaScript buffers and I
prefer use =js2-mode= instead because of his abilities to parses buffers and
builds an AST for things like syntax highlighting.

#+begin_src emacs-lisp
  (use-package js2-mode
    :hook ((js2-mode . js2-imenu-extras-mode)
           (js2-mode . prettier-js-mode))
    :mode "\\.js\\'"
    :custom (js-indent-level 2))
#+end_src

*** =js2-refactor=

Provides powerful refactoring based on the AST generated by =js2-mode=.

#+begin_src emacs-lisp
  (use-package js2-refactor
    :bind (:map js2-mode-map
                ("C-k" . js2r-kill)
                ("M-." . nil))
    :hook ((js2-mode . js2-refactor-mode)
           (js2-mode . (lambda ()
                         (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t))))
    :config (js2r-add-keybindings-with-prefix "C-c C-r"))
#+end_src

*** =xref-js2=

Makes it easy to jump to function references or definitions.

#+begin_src emacs-lisp
  (use-package xref-js2 :defer 5)
#+end_src

*** =tern=

Parses JavaScript files in a project and makes type inference to provide
meaningful completion (with type clues) and cross-reference support.

Unfortunately, =tern= has some problems with cross-references that explain why I
am using =xref-js2= instead.

#+begin_src emacs-lisp
  (use-package tern
    :ensure-system-package (tern . "npm install -g tern")
    :bind (("C-c C-c" . compile)
           :map tern-mode-keymap
           ("M-." . nil))
    :hook ((js2-mode . company-mode)
           (js2-mode . tern-mode)))
#+end_src

Then, add a =.tern-project= file to the root of your project.

Here is an example configuration for a project that uses =requirejs= and
=jQuery=, without taking into account of the =bower_components= directory:

#+begin_src json
  {
    "libs": [
      "jquery"
    ],
    "loadEagerly": [
      "./**/*.js"
    ],
    "dontLoad": [
      "./bower_components/"
    ],
    "plugins": {
      "requirejs": {
        "baseURL": "./"
      }
    }
  }
#+end_src

** JSON

JSON is probably the data format I use the most in the web. That's why its setup
below is a bit more advanced. As LSP server I prefer
[[https://emacs-lsp.github.io/lsp-mode/page/lsp-json/][vscode-json-langaugeserver]]. To use it, make sure you install it with your
package manager and to configure the LSP package. Although [[https://github.com/joshwnj/json-mode][json-mode]] is a
package that is no longer under development, it still satisfies my needs.

#+begin_src emacs-lisp
  (use-package json-mode
    :delight "J "
    :mode "\\.json\\'"
    :hook (before-save . my/json-mode-before-save-hook)
    :preface
    (defun my/json-mode-before-save-hook ()
      (when (eq major-mode 'json-mode)
        (json-pretty-print-buffer)))

    (defun my/json-array-of-numbers-on-one-line (encode array)
      "Prints the arrays of numbers in one line."
      (let* ((json-encoding-pretty-print
              (and json-encoding-pretty-print
                   (not (loop for x across array always (numberp x)))))
             (json-encoding-separator (if json-encoding-pretty-print "," ", ")))
        (funcall encode array)))
    :config (advice-add 'json-encode-array :around #'my/json-array-of-numbers-on-one-line))
#+end_src

** LaTeX

I use LaTeX for my reports, CVs, summaries, etc.

#+begin_src emacs-lisp
  (use-package tex
    :ensure auctex
    :bind (:map TeX-mode-map
                ("C-c C-o" . TeX-recenter-output-buffer)
                ("C-c C-l" . TeX-next-error)
                ("M-[" . outline-previous-heading)
                ("M-]" . outline-next-heading))
    :hook (LaTeX-mode . reftex-mode)
    :preface
    (defun my/switch-to-help-window (&optional ARG REPARSE)
      "Switches to the *TeX Help* buffer after compilation."
      (other-window 1))
    :custom
    (TeX-auto-save t)
    (TeX-byte-compile t)
    (TeX-clean-confirm nil)
    (TeX-master 'dwim)
    (TeX-parse-self t)
    (TeX-PDF-mode t)
    (TeX-source-correlate-mode t)
    (TeX-view-program-selection '((output-pdf "PDF Tools")))
    :config
    (advice-add 'TeX-next-error :after #'my/switch-to-help-window)
    (advice-add 'TeX-recenter-output-buffer :after #'my/switch-to-help-window)
    ;; the ":hook" doesn't work for this one... don't ask me why.
    (add-hook 'TeX-after-compilation-finished-functions 'TeX-revert-document-buffer))

  ;; (use-package lsp-latex
  ;;   :if (executable-find "texlab")
  ;;   :hook (LaTeX-mode . (lambda ()
  ;;                         (require 'lsp-latex)
  ;;                         (lsp)))
  ;;   :custom (lsp-latex-build-on-save t))

  (use-package bibtex
    :after auctex
    :hook (bibtex-mode . my/bibtex-fill-column)
    :preface
    (defun my/bibtex-fill-column ()
      "Ensures that each entry does not exceed 120 characters."
      (setq fill-column 120)))

  (use-package company-auctex
    :after (auctex company)
    :config (company-auctex-init))

  (use-package company-math :after (auctex company))
#+end_src

I want a TeX engine that can deal with Unicode and use any font I like.

#+begin_src emacs-lisp
  (setq-default TeX-engine 'xetex)
#+end_src

*** =reftex=

Minor mode with distinct support for =\label=, =\ref= and =\cite= in LaTeX.

#+begin_src emacs-lisp
  (use-package reftex
    :after auctex
    :custom
    (reftex-plug-into-AUCTeX t)
    (reftex-save-parse-info t)
    (reftex-use-multiple-selection-buffers t))
#+end_src

** Lua

I rarely program in Lua, but when I do, =lua-mode= satisfies me amply.

#+begin_src emacs-lisp
  (use-package lua-mode
    :delight "Λ "
    :mode "\\.lua\\'"
    :interpreter ("lua" . lua-mode))
#+end_src

** Markdown

Before you can use this package, make sure you install =pandoc= on your
operating system.

#+begin_src emacs-lisp
  (use-package markdown-mode
    :delight "μ "
    :ensure-system-package (pandoc . "yay -S pandoc")
    :mode ("\\.\\(md\\|markdown\\)\\'")
    :custom (markdown-command "/usr/bin/pandoc"))

  (use-package markdown-preview-mode
    :commands markdown-preview-mode
    :custom
    (markdown-preview-javascript
     (list (concat "https://github.com/highlightjs/highlight.js/"
                   "9.15.6/highlight.min.js")
           "<script>
              $(document).on('mdContentChange', function() {
                $('pre code').each(function(i, block)  {
                  hljs.highlightBlock(block);
                });
              });
            </script>"))
    (markdown-preview-stylesheets
     (list (concat "https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/"
                   "3.0.1/github-markdown.min.css")
           (concat "https://github.com/highlightjs/highlight.js/"
                   "9.15.6/styles/github.min.css")

           "<style>
              .markdown-body {
                box-sizing: border-box;
                min-width: 200px;
                max-width: 980px;
                margin: 0 auto;
                padding: 45px;
              }

              @media (max-width: 767px) { .markdown-body { padding: 15px; } }
            </style>")))
#+end_src

** PHP

https://github.com/felixfbecker/php-language-server

For people who wonder, I don't use =php-mode= because it can't handle
files that contain PHP and HTML. Also, why use another package when
=web-mode= already provides everything I need?

The function below provides my own PHP configuration with =flycheck=.

#+begin_src emacs-lisp
  (defun my/php-setup ()
    (web-mode)
    (make-local-variable 'web-mode-code-indent-offset)
    (make-local-variable 'web-mode-markup-indent-offset)
    (make-local-variable 'web-mode-css-indent-offset))
#+end_src

do not forget to add the following line in the =web-mode= package
configuration:

#+BEGIN_EXAMPLE
  (add-to-list 'auto-mode-alist '("\\.php$" . my/php-setup))
#+END_EXAMPLE

I like to use =ac-php= to enable GNU Emacs auto-completion for
PHP.

**NOTE:** =ac-php= supports =company mode= and =auto-complete=.

#+begin_src emacs-lisp
  (use-package ac-php
    :hook (php-mode . ac-php-mode)
    :custom (ac-sources '(ac-source-php))
    :config
    (ac-php-core-eldoc-setup)
    (auto-complete-mode t))
#+end_src

** PlantUML

It is often useful to be able to make diagrams for various large projects. For
the creation of these diagrams, [[http://plantuml.com/][PlantUML]] remains the best.

#+begin_src emacs-lisp
  (use-package plantuml-mode
    :mode ("\\.\\(plantuml\\|puml\\)\\'")
    :custom (plantuml-jar-path (expand-file-name (format "%s/plantuml.jar" xdg-lib))))
#+end_src

** Python

To have a fast and stable environment, I recommend to use [[https://github.com/python-lsp/python-lsp-server][python-lsp-server]] as
LSP server. =mspyls= is faster than =pylsp=, but =mspyls= has a memory leakage. For
some reasons, I have some issues with =pyright= and =company=, the successor of
=mspyls=. From then on, I use =pylsp= on my daily basis.

I use [[https://github.com/psf/black][black]] to reformat my Python buffer. Before use it, do not forget to install
=python-black= in your system.

To sort my Python imports, [[https://github.com/paetzke/py-isort.el][py-isort]] does a good job. Also, do not forget to
install =python-isort= in your system.

Let's take a look to my Python configuration:

#+begin_src emacs-lisp
  (use-package blacken
    :delight
    :hook (python-mode . blacken-mode)
    :custom (blacken-line-length 79))

  (use-package python-mode
    :delight "π "
    :ensure nil
    :bind (:map python-mode-map
                ("M-[" . python-nav-backward-block)
                ("M-]" . python-nav-forward-block))
    :preface
    (defun python-remove-unused-imports()
      "Removes unused imports and unused variables with autoflake."
      (interactive)
      (if (executable-find "autoflake")
          (progn
            (shell-command (format "autoflake --remove-all-unused-imports -i %s"
                                   (shell-quote-argument (buffer-file-name))))
            (revert-buffer t t t))
        (warn "python-mode: Cannot find autoflake executable."))))

  (use-package lsp-pyright
    :if (executable-find "pyright")
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp-deferred)))
    :custom
    (lsp-pyright-python-executable-cmd "python3")
    (lsp-pyright-venv-path "~/.cache/pypoetry/virtualenvs/"))

  (use-package py-isort
    :hook ((python-mode . pyvenv-mode)
           (before-save . py-isort-before-save)))

  (use-package pyenv-mode
    :hook ((python-mode . pyenv-mode)
           (projectile-switch-project . projectile-pyenv-mode-set))
    :custom (pyenv-mode-set "3.8.5")
    :preface
    (defun projectile-pyenv-mode-set ()
      "Set pyenv version matching project name."
      (let ((project (projectile-project-name)))
        (if (member project (pyenv-mode-versions))
            (pyenv-mode-set project)
          (pyenv-mode-unset)))))

  (use-package pyvenv
    :after python
    :custom
    (pyvenv-default-virtual-env-name (expand-file-name (format "%s/myenv/" xdg-data)))
    (pyvenv-workon (expand-file-name (format "%s/myenv/" xdg-data)))
    :config
    (pyvenv-tracking-mode 1))
#+end_src

** Shell-script

A recent thing when you create/edit a shell script file is to automatically
grant it execution rights (with =chmod +x=).

The snippet below ensures that the execution right is automatically granted to
save a shell script file that begins with a =#!= shebang:

#+begin_src emacs-lisp
  (use-package sh-script
    :ensure nil
    :hook (after-save . executable-make-buffer-file-executable-if-script-p))
#+end_src

** SQL

=sql-indent= gives me the possibility to easily manage =.sql= files.

#+begin_src emacs-lisp
  (use-package sql-indent
    :after (:any sql sql-interactive-mode)
    :delight sql-mode "Σ ")
#+end_src

** Style Sheet

GNU Emacs already has built-in packages for style sheet languages (e.g., CSS,
LESS, and SCSS). Therefore, installing an appropriate LSP server and making sure
that the variables are properly indented is more than enough. For the LSP
server, I use [[https://github.com/vscode-langservers/vscode-css-languageserver][vscode-css-languageserver]] (=css-ls=) although it does not support
the LESS language. To use it, do not forget to configure the LSP package and to
install this LSP server through =lsp-mode= or with your system package manager.

#+begin_src emacs-lisp
  (use-package css-mode
    :ensure nil
    :mode ("\\.css\\'")
    :custom (css-indent-offset 2))
#+end_src

** TypeScript

If you use GNU Emacs 27+, I recommend to use [[https://github.com/ananthakumaran/tide][typescript-language-server]] as LSP
server. After installed it with your package manager, you need to use
=typescript-mode= to get the syntax color:

#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode ("\\.\\(ts\\|tsx\\)\\'")
    :hook (typescript-mode . prettier-js-mode)
    :custom
    (add-hook 'typescript-mode-hook #'(lambda ()
                                        (enable-minor-mode
                                         '("\\.tsx?\\'" . prettier-js-mode))))
    (lsp-clients-typescript-server-args '("--stdio" "--tsserver-log-file" "/dev/stderr")))
#+end_src

** XML

To manage XML related files the =nxml-mode= package built into GNU Emacs and the
[[https://emacs-lsp.github.io/lsp-mode/page/lsp-xml/][LemMinX]] (=xmlls=) LSP server does the job. To use it, do not forget to configure
the LSP package and to install this LSP server through =lsp-mode= or with your
system package manager.

#+begin_src emacs-lisp
  (use-package nxml-mode
    :ensure nil
    :hook (nxml-mode . lsp-deferred)
    :mode ("\\.\\(xml\\|xsd\\|wsdl\\)\\'"))
#+end_src

** Vue.js

If you need to program in =Vue.js=, I wish you good luck in having a fast and
stable environment. Fortunately, I rarely use =Vue.js=, but the little I had to
use it, I pulled my hair out.

Until this day, [[https://github.com/emacs-lsp-legacy/lsp-vue][lsp-vue]] as LSP client and [[https://github.com/vuejs/vetur/tree/master/server][vue-language-server]] as LSP server,
seems to be the best combo so far.

*NOTE:* =lsp-vue= is included in =lsp-mode=. Therefore, do not forget to
configure [[#lsp][lsp-mode]].

Let's define [[https://github.com/AdamNiederer/vue-mode][vue-mode]] as major mode of our =.vue= files:

#+begin_src emacs-lisp
  (use-package vue-mode
    :delight "V "
    :mode "\\.vue\\'"
    :custom
    (mmm-submode-decoration-level 0)
    (vue-html-extra-indent 2))
#+end_src

** YAML

When I have to develop through YAML files, the [[https://github.com/yoshiki/yaml-mode][yaml-mode]] package with the
[[https://emacs-lsp.github.io/lsp-mode/page/lsp-yaml/][yaml-language-server]] LSP server meets my needs. To use it, do not forget to
configure the LSP package and to install this LSP server through =lsp-mode= or
with your system package manager.

#+begin_src emacs-lisp
  (use-package yaml-mode
    :delight "ψ"
    :hook (yaml-mode . lsp-deferred)
    :mode ("\\.\\(yaml\\|yml\\)\\'"))
#+end_src

** Yarn

Most of the web project that you will do, will use =yarn= as dependency management.

It may be useful to take a look at the generated =yarn.lock= file. However, be
careful to not modify it. The =yarn-mode= is a small package that automatically
places this buffer in read-only and activates the syntax color for these files.

#+begin_src emacs-lisp
    (use-package yarn-mode
      :mode "yarn\\.lock\\'")
#+end_src

* Advanced Configuration

** Alert

Most packages use =alerts= to make notifications with =libnotify=. Do not forget
to first install a notification daemon, like =dunst=.

#+begin_quote
Alert is a Growl-workalike for Emacs which uses a common notification interface
and multiple, selectable "styles", whose use is fully customizable by the user.

[[https://github.com/jwiegley/alert][John Wiegley]]
#+end_quote

#+begin_src emacs-lisp
    (use-package org-wild-notifier
      :after org
      :custom
      (alert-default-style 'libnotify)
      (org-wild-notifier-notification-title "Agenda Reminder")
      :config (org-wild-notifier-mode))
#+end_src

** Auto-Completion

=company= provides auto-completion at point and displays a small pop-in
containing the candidates.

#+begin_quote
Company is a text completion framework for Emacs. The name stands for "complete
anything". It uses pluggable back-ends and front-ends to retrieve and display
completion candidates.

[[http://company-mode.github.io/][Dmitry Gutov]]
#+end_quote

#+begin_src emacs-lisp
  (use-package company
    :defer 0.5
    :delight
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay 0)
    (company-minimum-prefix-length 2)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't)
    (global-company-mode t))
#+end_src

I use =company= with =company-box= that allows a company front-end with icons.

#+begin_src emacs-lisp
  (use-package company-box
    :if (display-graphic-p)
    :after company
    :hook (company-mode . company-box-mode))
#+end_src

** Backups

It is important to have a stable backup environment. Don't hesitate to save a
lot.

*NOTE:* the functions defined below avoid running a bash command when saving
certain files with GNU Emacs.

#+begin_src emacs-lisp
  (use-package files
    :ensure nil
    :preface
    (defvar *afilename-cmd*
      `((,(format "%s/X11/Xresources" xdg-config) . ,(format "xrdb -merge %s/X11/Xresources" xdg-config))
        (,(format "%s/xbindkeysrc" (getenv "HOME")) . "xbindkeys -p"))
      "File association list with their respective command.")

    (defun my/cmd-after-saved-file ()
      "Execute a command after saved a specific file."
      (let* ((match (assoc (buffer-file-name) *afilename-cmd*)))
        (when match
          (shell-command (cdr match)))))
    :hook (after-save . my/cmd-after-saved-file)
    :custom
    (backup-directory-alist `(("." . ,(expand-file-name (format "%s/emacs/backups/" xdg-data)))))
    (delete-old-versions -1)
    (vc-make-backup-files t)
    (version-control t))
#+end_src

** Browser

I try to avoid using the mouse as much as possible, even for
navigation. Therefore, I use [[https://github.com/qutebrowser/qutebrowser][qutebrowser]], a keyboard-focused browser with a
minimal GUI.

#+begin_src emacs-lisp
  (use-package browse-url
    :ensure nil
    :custom
    (browse-url-browser-function 'browse-url-generic)
    (browse-url-generic-program "qutebrowser"))
#+end_src

*** =engine-mode=

I use it to do most of my web searches without leaving GNU Emacs.

#+begin_src emacs-lisp
  (use-package engine-mode
    :defer 3
    :config
    (defengine amazon
      "http://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords=%s"
      :keybinding "a")

    (defengine duckduckgo
      "https://duckduckgo.com/?q=%s"
      :keybinding "d")

    (defengine github
      "https://github.com/search?ref=simplesearch&q=%s"
      :keybinding "g")

    (defengine google-images
      "http://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s"
      :keybinding "i")

    (defengine google-maps
      "http://maps.google.com/maps?q=%s"
      :keybinding "m"
      :docstring "Mappin' it up.")

    (defengine stack-overflow
      "https://stackoverflow.com/search?q=%s"
      :keybinding "s")

    (defengine youtube
      "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
      :keybinding "y")

    (defengine wikipedia
      "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
      :keybinding "w"
      :docstring "Searchin' the wikis.")
    (engine-mode t))
#+end_src

** Buffers

Buffers can quickly become a mess. For some people, it's not a problem, but I
like being able to find my way easily.

#+begin_src emacs-lisp
  (use-package ibuffer
    :bind ("C-x C-b" . ibuffer))

  (use-package ibuffer-projectile
    :after ibuffer
    :preface
    (defun my/ibuffer-projectile ()
      (ibuffer-projectile-set-filter-groups)
      (unless (eq ibuffer-sorting-mode 'alphabetic)
        (ibuffer-do-sort-by-alphabetic)))
    :hook (ibuffer . my/ibuffer-projectile))
#+end_src

Some buffers should not be deleted by accident:

#+begin_src emacs-lisp
  (defvar *protected-buffers* '("*scratch*" "*Messages*")
    "Buffers that cannot be killed.")

  (defun my/protected-buffers ()
    "Protects some buffers from being killed."
    (dolist (buffer *protected-buffers*)
      (with-current-buffer buffer
        (emacs-lock-mode 'kill))))

  (add-hook 'after-init-hook #'my/protected-buffers)
#+end_src

** Calculator

May be useful in a timely manner.

#+begin_src emacs-lisp
  (use-package calc
    :defer t
    :custom
    (math-additional-units
     '((GiB "1024 * MiB" "Giga Byte")
       (MiB "1024 * KiB" "Mega Byte")
       (KiB "1024 * B" "Kilo Byte")
       (B nil "Byte")
       (Gib "1024 * Mib" "Giga Bit")
       (Mib "1024 * Kib" "Mega Bit")
       (Kib "1024 * b" "Kilo Bit")
       (b "B / 8" "Bit")))
    (math-units-table nil))
#+end_src

** Calendar

Remembering all the dates is not obvious, especially since some varies every
year. To remember each important date, I recorded the list of important
dates according to my country, Belgium. It is very likely that some dates are
different in your country, therefore, adapt the configuration below accordingly.

#+begin_src emacs-lisp
  (use-package calendar
    :ensure nil
    :custom (calendar-mark-holidays-flag t))

  (use-package holidays
    :ensure nil
    :custom
    (holiday-bahai-holidays nil)
    (holiday-christian-holidays
     '((holiday-fixed 1 6 "Epiphany")
       (holiday-fixed 2 2 "Candlemas")
       (holiday-easter-etc -47 "Mardi Gras")
       (holiday-easter-etc 0 "Easter Day")
       (holiday-easter-etc 1 "Easter Monday")
       (holiday-easter-etc 39 "Ascension")
       (holiday-easter-etc 49 "Pentecost")
       (holiday-fixed 8 15 "Assumption")
       (holiday-fixed 11 1 "All Saints' Day")
       (holiday-fixed 11 2 "Day of the Dead")
       (holiday-fixed 11 22 "Saint Cecilia's Day")
       (holiday-fixed 12 1 "Saint Eloi's Day")
       (holiday-fixed 12 4 "Saint Barbara")
       (holiday-fixed 12 6 "Saint Nicholas Day")
       (holiday-fixed 12 25 "Christmas Day")))
    (holiday-general-holidays
     '((holiday-fixed 1 1 "New Year's Day")
       (holiday-fixed 2 14 "Valentine's Day")
       (holiday-fixed 3 8 "International Women's Day")
       (holiday-fixed 10 31 "Halloween")
       (holiday-fixed 11 11 "Armistice of 1918")))
    (holiday-hebrew-holidays nil)
    (holiday-islamic-holidays nil)
    (holiday-local-holidays
     '((holiday-fixed 5 1 "Labor Day")
       (holiday-float 3 0 0 "Grandmothers' Day")
       (holiday-float 4 4 3 "Secretary's Day")
       (holiday-float 5 0 2 "Mother's Day")
       (holiday-float 6 0 3 "Father's Day")))
    (holiday-oriental-holidays nil))
#+end_src

** Dashboard

Always good to have a dashboard.

#+begin_src emacs-lisp
  (use-package dashboard
    :custom
    (dashboard-banner-logo-title "With Great Power Comes Great Responsibility!")
    (dashboard-center-content t)
    (dashboard-items '((agenda)
                       (projects . 5)))
    (dashboard-projects-switch-function 'counsel-projectile-switch-project-by-name)
    (dashboard-set-file-icons t)
    (dashboard-set-footer nil)
    (dashboard-set-heading-icons t)
    (dashboard-set-navigator t)
    (dashboard-startup-banner 'logo)
    :config (dashboard-setup-startup-hook))
#+end_src

** EditorConfig

[[https://editorconfig.org/][EditorConfig]] helps maintain consistent coding styles for multiple developers
working on the same project across various editors and IDEs.

#+begin_src emacs-lisp
(use-package editorconfig
  :defer 0.3
  :config (editorconfig-mode 1))
#+end_src

** Ending Up

I'm using an =.org= file to maintain my GNU Emacs configuration. However, at its
launch, it will load the =config.el= source file for a faster loading.

The code below, executes =org-babel-tangle= asynchronously when
=config.org= is saved.

#+begin_src emacs-lisp
    (use-package async :after org)

    (defvar *config-file* (expand-file-name "config.org" user-emacs-directory)
      "The configuration file.")

    (defvar *config-last-change* (nth 5 (file-attributes *config-file*))
      "Last modification time of the configuration file.")

    (defvar *show-async-tangle-results* nil
      "Keeps *emacs* async buffers around for later inspection.")

    (defun my/config-updated ()
      "Checks if the configuration file has been updated since the last time."
      (time-less-p *config-last-change*
                   (nth 5 (file-attributes *config-file*))))

    (defun my/config-tangle ()
      "Tangles the org file asynchronously."
      (when (my/config-updated)
        (setq *config-last-change*
              (nth 5 (file-attributes *config-file*)))
        (my/async-babel-tangle *config-file*)))

    (defun my/async-babel-tangle (org-file)
      "Tangles the org file asynchronously."
      (let ((init-tangle-start-time (current-time))
            (file (buffer-file-name))
            (async-quiet-switch "-q"))
        (async-start
         `(lambda ()
            (require 'org)
            (org-babel-tangle-file ,org-file))
         (unless *show-async-tangle-results*
           `(lambda (result)
              (if result
                  (message "SUCCESS: %s successfully tangled (%.2fs)."
                           ,org-file
                           (float-time (time-subtract (current-time)
                                                      ',init-tangle-start-time)))
                (message "ERROR: %s as tangle failed." ,org-file)))))))
#+end_src

** EPUB

#+begin_src emacs-lisp
  (use-package nov
    :mode ("\\.epub\\'" . nov-mode)
    :custom (nov-text-width 75))
#+end_src

** Helpful

[[https://github.com/Wilfred/helpful][Helpful]] gives more user-friendly documentation with =C-h f=.

#+begin_src emacs-lisp
  (use-package helpful
    :commands (helpful-callable helpful-command helpful-function helpful-key
                                helpful-symbol helpful-variable)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-command] . helpful-command)
    ([remap describe-function] . helpful-function)
    ([remap describe-key] . helpful-key)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-variable] . helpful-variable))
#+end_src

** Spelling

*** Abbreviations

According to a list of misspelled words, =abbrev= auto-correct these words on
the fly.

#+begin_src emacs-lisp
  (use-package abbrev
    :ensure nil
    :delight
    :hook (text-mode . abbrev-mode)
    :custom (abbrev-file-name (expand-file-name (format "%s/emacs/abbrev_defs" xdg-data)))
    :config
    (if (file-exists-p abbrev-file-name)
        (quietly-read-abbrev-file)))
#+end_src

*** Fly Spell

For the other words that would not be in my list of abbreviations, =flyspell=
enables spell checking on-the-fly in GNU Emacs.

#+begin_src emacs-lisp
  (use-package flyspell
    :delight
    :hook ((markdown-mode org-mode text-mode) . flyspell-mode)
           (prog-mode . flyspell-prog-mode)
    :custom
    (flyspell-abbrev-p t)
    (flyspell-default-dictionary "en_US")
    (flyspell-issue-message-flag nil)
    (flyspell-issue-welcome-flag nil))

  (use-package flyspell-correct-ivy
    :after (flyspell ivy)
    :init (setq flyspell-correct-interface #'flyspell-correct-ivy))
#+end_src

*** Spell Checker

No one is immune to spelling mistakes. So I like to check the spelling of the
document once it has been written. To do this, I use =hunspell=, the modern
spell checker.

*NOTE:* the reason I prefer =hunspell= to =aspell= is that according to the
latest news, hunspell has made it possible to be more consistent on fly
spells. However, most people still use =aspell= because it allows you to spot
errors in camelCase, convenient for when you program. Personally, I just want to
check the spelling in the comments and not in the whole document, so =hunspell= is
perfect for me.

To use =hunspell= and the desired dictionaries on GNU Emacs, you must first
install them (e.g., =hunspell-en_US=, =hunspell-fr=) with the package manager of
your operating system.

#+begin_src emacs-lisp
  (use-package ispell
    :defer 2
    :ensure-system-package (hunspell . "yay -S hunspell")
    :init
    (setenv "LANG" "en_US")
    :custom
    (ispell-local-dictionary "en_US")
    (ispell-local-dictionary-alist
     '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)
       ("fr_FR" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "fr_FR") nil utf-8)))
    (ispell-dictionary "en_US")
    (ispell-dictionary-alist
     '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)
       ("fr_FR" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "fr_FR") nil utf-8)))
    (ispell-program-name (executable-find "hunspell"))
    (ispell-really-hunspell t)
    (ispell-silently-savep t)
    (ispell-extra-args '("--sug-mode=ultra"))
    :preface
    (defun my/switch-language ()
      "Switches between the English and French language."
      (interactive)
      (let* ((current-dictionary ispell-current-dictionary)
             (new-dictionary (if (string= current-dictionary "fr_FR") "en_US" "fr_FR")))
        (ispell-change-dictionary new-dictionary)
        (if (string= new-dictionary "fr_FR")
            (langtool-switch-default-language "fr")
          (langtool-switch-default-language "en"))

        ;; Clears all these old errors after switching to the new language
        (if (and (boundp 'flyspell-mode) flyspell-mode)
            (flyspell-mode 0)
          (flyspell-mode 1))
        (message "Dictionary switched from %s to %s" current-dictionary new-dictionary))))
#+end_src

*** Grammar Checker

[[https://languagetool.org/][LanguageTool]] is great for correcting your grammar. Combined with =abbrev-mode=
and =flyspell=, you will have better documents. To be able to use it
locally, download the desktop version and change the paths indicated below.

#+begin_src emacs-lisp
  (use-package langtool
    :defer 2
    :delight
    :custom
    (langtool-default-language "en")
    (langtool-disabled-rules '("COMMA_PARENTHESIS_WHITESPACE"
                               "COPYRIGHT"
                               "DASH_RULE"
                               "EN_QUOTES"
                               "EN_UNPAIRED_BRACKETS"
                               "UPPERCASE_SENTENCE_START"
                               "WHITESPACE_RULE"))
    (langtool-language-tool-jar (expand-file-name
                                 (format "%s/LangueageTool-4.2/languagetool-commandline.jar" xdg-lib)))
    (langtool-language-tool-server-jar (expand-file-name
                                        (format "%s/LanguageTool-4.2/languagetool-server.jar" xdg-lib)))
    (langtool-mother-tongue "fr"))
#+end_src

** History

Provides the ability to have commands and their history saved so that whenever
you return to work, you can re-run things as you need them. This is not a
radical function, it is part of a good user experience.

#+begin_src emacs-lisp
  (use-package savehist
    :ensure nil
    :custom
    (history-delete-duplicates t)
    (history-length t)
    (savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
    (savehist-file (expand-file-name (format "%s/emacs/history" xdg-cache)))
    (savehist-save-minibuffer-history 1)
    :config (savehist-mode 1))
#+end_src

** Highlight indentation

Highlight the indentation is a feature that visually pleases me. Indeed, without
having to count the spaces, I can see that the code is well indented.

#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :hook (prog-mode . highlight-indent-guides-mode)
    :custom (highlight-indent-guides-method 'character))
#+end_src

** Hydra

Hydra allows me to display a list of all the commands implemented in the echo
area and easily interact with them.

#+begin_quote
Once you summon the Hydra through the prefixed binding (the body + any one
head), all heads can be called in succession with only a short extension.

The Hydra is vanquished once Hercules, any binding that isn't the Hydra's head,
arrives. Note that Hercules, besides vanquishing the Hydra, will still serve his
original purpose, calling his proper command. This makes the Hydra very
seamless, it's like a minor mode that disables itself auto-magically.

[[https://github.com/abo-abo/hydra][Oleh Krehel]]
#+end_quote

#+begin_src emacs-lisp
  (use-package hydra
    :bind (("C-c I" . hydra-image/body)
           ("C-c L" . hydra-ledger/body)
           ("C-c M" . hydra-merge/body)
           ("C-c T" . hydra-tool/body)
           ("C-c b" . hydra-btoggle/body)
           ("C-c c" . hydra-clock/body)
           ("C-c e" . hydra-circe/body)
           ("C-c f" . hydra-flycheck/body)
           ("C-c g" . hydra-go-to-file/body)
           ("C-c m" . hydra-magit/body)
           ("C-c o" . hydra-org/body)
           ("C-c p" . hydra-projectile/body)
           ("C-c q" . hydra-query/body)
           ("C-c s" . hydra-spelling/body)
           ("C-c t" . hydra-tex/body)
           ("C-c u" . hydra-upload/body)
           ("C-c w" . hydra-windows/body)))

  (use-package major-mode-hydra
    :after hydra
    :preface
    (defun with-alltheicon (icon str &optional height v-adjust face)
      "Displays an icon from all-the-icon."
      (s-concat (all-the-icons-alltheicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-faicon (icon str &optional height v-adjust face)
      "Displays an icon from Font Awesome icon."
      (s-concat (all-the-icons-faicon icon ':v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-fileicon (icon str &optional height v-adjust face)
      "Displays an icon from the Atom File Icons package."
      (s-concat (all-the-icons-fileicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-octicon (icon str &optional height v-adjust face)
      "Displays an icon from the GitHub Octicons."
      (s-concat (all-the-icons-octicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str)))
#+end_src

*** Hydra / BToggle

Group a lot of commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-btoggle
    (:hint nil :color amaranth :quit-key "q" :title (with-faicon "toggle-on" "Toggle" 1 -0.05))
    ("Basic"
     (("a" abbrev-mode "abbrev" :toggle t)
      ("h" global-hungry-delete-mode "hungry delete" :toggle t))
     "Coding"
     (("e" electric-operator-mode "electric operator" :toggle t)
      ("F" flyspell-mode "flyspell" :toggle t)
      ("f" flycheck-mode "flycheck" :toggle t)
      ("l" lsp-mode "lsp" :toggle t)
      ("s" smartparens-mode "smartparens" :toggle t))
     "UI"
     (("i" ivy-rich-mode "ivy-rich" :toggle t))))
#+end_src

*** Hydra / Circe

Group circe commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-circe
    (:hint nil :color teal :quit-key "q" :title (with-faicon "comments-o" "Circe" 1 -0.05))
    ("Action"
     (
      ("c" circe "connect")
      ("r" circe-reconnect "reconnect"))))
#+end_src

*** Hydra / Clock

Group clock commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-clock
    (:hint nil :color teal :quit-key "q" :title (with-faicon "clock-o" "Clock" 1 -0.05))
    ("Action"
     (("c" org-clock-cancel "cancel")
      ("d" org-clock-display "display")
      ("e" org-clock-modify-effort-estimate "effort")
      ("i" org-clock-in "in")
      ("j" org-clock-goto "jump")
      ("o" org-clock-out "out")
      ("p" org-pomodoro "pomodoro")
      ("r" org-clock-report "report"))))
#+end_src

*** Hydra / Flycheck

Group Flycheck commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-flycheck
    (:hint nil :color teal :quit-key "q" :title (with-faicon "plane" "Flycheck" 1 -0.05))
    ("Checker"
     (("?" flycheck-describe-checker "describe")
      ("d" flycheck-disable-checker "disable")
      ("m" flycheck-mode "mode")
      ("s" flycheck-select-checker "select"))
     "Errors"
     (("<" flycheck-previous-error "previous" :color pink)
      (">" flycheck-next-error "next" :color pink)
      ("f" flycheck-buffer "check")
      ("l" flycheck-list-errors "list"))
     "Other"
     (("M" flycheck-manual "manual")
      ("v" flycheck-verify-setup "verify setup"))))
#+end_src

*** Hydra / Go To

Group jump-to-files commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-go-to-file
    (:hint nil :color teal :quit-key "q" :title (with-octicon "file-symlink-file" "Go To" 1 -0.05))
    ("Agenda"
     (("ac" (find-file "~/.personal/agenda/contacts.org") "contacts")
      ("ah" (find-file "~/.personal/agenda/home.org") "home")
      ("ai" (find-file "~/.personal/agenda/inbox.org") "inbox")
      ("ap" (find-file "~/.personal/agenda/people.org") "people")
      ("ar" (find-file "~/.personal/agenda/routine.org") "routine")
      ("aw" (find-file "~/.personal/agenda/work.org") "work"))
     "Config"
     (("ca" (find-file (format "%s/alacritty/alacritty.yml" xdg-config)) "alacritty")
      ("cA" (find-file (format "%s/sh/aliases" xdg-config)) "aliases")
      ("ce" (find-file "~/.emacs.d/config.org") "emacs")
      ("cE" (find-file (format "%s/sh/environ" xdg-config)) "environ")
      ("cn" (find-file (format "%s/neofetch/config.conf" xdg-config)) "neofetch")
      ("cq" (find-file (format "%s/qutebrowser/config.py" xdg-config)) "qutebrowser")
      ("cr" (find-file (format "%s/ranger/rc.conf" xdg-config)) "ranger")
      ("cs" (find-file (format "%s/sway/config" xdg-config)) "sway")
      ("ct" (find-file (format "%s/tmux/tmux.conf" xdg-config)) "tmux")
      ("cw" (find-file (format "%s/waybar/config" xdg-config)) "waybar")
      ("cW" (find-file (format "%s/wofi/config" xdg-config)) "wofi")
      ("cx" (find-file (format "%s/sh/xdg" xdg-config)) "xdg"))
     "Notes"
     (("na" (find-file (format "~/.personal/notes/affirmations.pdf" xdg-config)) "Affirmations"))
     "Other"
     (("ob" (find-file "~/.personal/other/books.org") "book")
      ("ol" (find-file "~/.personal/other/long-goals.org") "long-terms goals")
      ("om" (find-file "~/.personal/other/movies.org"))
      ("op" (find-file "~/.personal/other/purchases.org") "purchase")
      ("os" (find-file "~/.personal/other/short-goals.org") "short-terms goals")
      ("ou" (find-file "~/.personal/other/usb.org") "usb")
      ("oL" (find-file "~/.personal/other/learning.org") "learning"))))
#+end_src

*** Hydra / Image

Group images commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-image
    (:hint nil :color pink :quit-key "q" :title (with-faicon "file-image-o" "Images" 1 -0.05))
    ("Action"
     (("r" image-rotate "rotate")
      ("s" image-save "save" :color teal))
      "Zoom"
      (("-" image-decrease-size "out")
       ("+" image-increase-size "in")
       ("=" image-transform-reset "reset"))))
#+end_src

*** Hydra / Ledger

Group Ledger commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-ledger
    (:hint nil :color teal :quit-key "q" :title (with-faicon "usd" "Ledger" 1 -0.05))
    ("Action"
     (("b" leadger-add-transaction "add")
      ("c" ledger-mode-clean-buffer "clear")
      ("i" ledger-copy-transaction-at-point "copy")
      ("s" ledger-delete-current-transaction "delete")
      ("r" ledger-report "report"))))
#+end_src

*** Hydra / Magit

Group Magit commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-magit
    (:hint nil :color teal :quit-key "q" :title (with-octicon "mark-github" "Magit" 1 -0.05))
    ("Action"
     (("b" magit-blame "blame")
      ("c" magit-clone "clone")
      ("i" magit-init "init")
      ("l" magit-log-buffer-file "commit log (current file)")
      ("L" magit-log-current "commit log (project)")
      ("s" magit-status "status"))))
#+end_src

*** Hydra / Merge

Group Merge commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-merge
    (:hint nil :color pink :quit-key "q" :title (with-octicon "mark-github" "Magit" 1 -0.05))
    ("Move"
     (("n" smerge-next "next")
      ("p" smerge-prev "previous"))
     "Keep"
     (("RET" smerge-keep-current "current")
      ("a" smerge-keep-all "all")
      ("b" smerge-keep-base "base")
      ("l" smerge-keep-lower "lower")
      ("u" smerge-keep-upper "upper"))
     "Diff"
     (("<" smerge-diff-base-upper "upper/base")
      ("=" smerge-diff-upper-lower "upper/lower")
      (">" smerge-diff-base-lower "base/lower")
      ("R" smerge-refine "redefine")
      ("E" smerge-ediff "ediff"))
     "Other"
     (("C" smerge-combine-with-next "combine")
      ("r" smerge-resolve "resolve")
      ("k" smerge-kill-current "kill current"))))
#+end_src

*** Hydra / Org

Group Org commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-org
    (:hint nil :color teal :quit-key "q" :title (with-fileicon "org" "Org" 1 -0.05))
    ("Action"
     (("A" my/org-archive-done-tasks "archive")
      ("a" org-agenda "agenda")
      ("c" org-capture "capture")
      ("d" org-decrypt-entry "decrypt")
      ("i" org-insert-link-global "insert-link")
      ("j" my/org-jump "jump-task")
      ("k" org-cut-subtree "cut-subtree")
      ("o" org-open-at-point-global "open-link")
      ("r" org-refile "refile")
      ("s" org-store-link "store-link")
      ("t" org-show-todo-tree "todo-tree"))))
#+end_src

*** Hydra / Projectile

Group Projectile commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-projectile
    (:hint nil :color teal :quit-key "q" :title (with-faicon "rocket" "Projectile" 1 -0.05))
    ("Buffers"
     (("b" counsel-projectile-switch-to-buffer "list")
      ("k" projectile-kill-buffers "kill all")
      ("S" projectile-save-project-buffers "save all"))
     "Find"
     (("d" counsel-projectile-find-dir "directory")
      ("D" projectile-dired "root")
      ("f" counsel-projectile-find-file "file")
      ("p" counsel-projectile-switch-project "project"))
     "Other"
     (("i" projectile-invalidate-cache "reset cache"))
     "Search"
     (("r" projectile-replace "replace")
      ("R" projectile-replace-regexp "regexp replace")
      ("s" counsel-rg "search"))))
#+end_src

*** Hydra / Query

Group Query commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-query
    (:hint nil :color teal :quit-key "q" :title (with-faicon "search" "Engine-Mode" 1 -0.05))
    ("Query"
     (("a" engine/search-amazon "amazon")
      ("d" engine/search-duckduckgo "duckduckgo")
      ("g" engine/search-github "github")
      ("i" engine/search-google-images "google images")
      ("m" engine/search-google-maps "google maps")
      ("s" engine/search-stack-overflow "stack overflow")
      ("w" engine/search-wikipedia "wikipedia")
      ("y" engine/search-youtube "youtube"))))
#+end_src

*** Hydra / Spelling

Group spelling commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-spelling
    (:hint nil :color teal :quit-key "q" :title (with-faicon "magic" "Spelling" 1 -0.05))
    ("Checker"
     (("c" langtool-correct-buffer "correction")
      ("C" langtool-check-done "clear")
      ("d" ispell-change-dictionary "dictionary")
      ("l" (message "Current language: %s (%s)" langtool-default-language ispell-current-dictionary) "language")
      ("s" my/switch-language "switch")
      ("w" wiki-summary "wiki"))
     "Errors"
     (("<" flyspell-correct-previous "previous" :color pink)
      (">" flyspell-correct-next "next" :color pink)
      ("f" langtool-check "find"))))
#+end_src

*** Hydra / TeX

Group TeX commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-tex
    (:hint nil :color teal :quit-key "q" :title (with-fileicon "tex" "LaTeX" 1 -0.05))
    ("Action"
     (("g" reftex-goto-label "goto")
      ("r" reftex-query-replace-document "replace")
      ("s" counsel-rg "search")
      ("t" reftex-toc "table of content"))))
#+end_src

*** Hydra / Tool

Group Tool commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-tool
    (:hint nil :color teal :quit-key "q" :title (with-faicon "briefcase" "Tool" 1 -0.05))
    ("Network"
     (("c" ipcalc "subnet calculator")
      ("i" ipinfo "ip info"))))
#+end_src

*** Hydra / TypeScript

Group TypeScript commands.

#+begin_src emacs-lisp
  (defhydra hydra-typescript (:color blue)
    "
    ^
    ^TypeScript^          ^Do^
    ^──────────^──────────^──^───────────
    _q_ quit             _b_ back
    ^^                   _e_ errors
    ^^                   _j_ jump
    ^^                   _r_ references
    ^^                   _R_ restart
    ^^                   ^^
    "
    ("q" nil)
    ("b" tide-jump-back)
    ("e" tide-project-errors)
    ("j" tide-jump-to-definition)
    ("r" tide-references)
    ("R" tide-restart-server))
#+end_src

*** Hydra / Upload

Group upload commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-upload
    (:hint nil :color teal :quit-key "q" :title (with-faicon "cloud-upload" "Upload" 1 -0.05))
    ("Action"
     (("b" webpaste-paste-buffe "buffer")
      ("i" imgbb-upload "image")
      ("r" webpaste-paste-region "region"))))
#+end_src

*** Hydra / Windows

Group window-related commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-windows
    (:hint nil :forein-keys warn :quit-key "q" :title (with-faicon "windows" "Windows" 1 -0.05))
    ("Window"
     (("b" balance-windows "balance")
      ("i" enlarge-window "heighten")
      ("j" shrink-window-horizontally "narrow")
      ("k" shrink-window "lower")
      ("u" winner-undo "undo")
      ("r" winner-redo "redo")
      ("l" enlarge-window-horizontally "widen")
      ("s" switch-window-then-swap-buffer "swap" :color teal))
     "Zoom"
     (("-" text-scale-decrease "out")
      ("+" text-scale-increase "in")
      ("=" (text-scale-increase 0) "reset"))))
#+end_src

** General

*** =aggressive-indent=

Auto-indent code as you write.

#+begin_quote
=electric-indent-mode= is enough to keep your code nicely aligned when all you
do is type. However, once you start shifting blocks around, transposing lines,
or slurping and barfing sexps, indentation is bound to go wrong.

=aggressive-indent-mode= is a minor mode that keeps your code *always* indented.
It reindents after every change, making it more reliable than
electric-indent-mode.

[[https://github.com/Malabarba/aggressive-indent-mode][Artur Malabarba]]
#+end_quote

#+begin_src emacs-lisp
  (use-package aggressive-indent
    :hook ((css-mode . aggressive-indent-mode)
           (emacs-lisp-mode . aggressive-indent-mode)
           (js-mode . aggressive-indent-mode)
           (lisp-mode . aggressive-indent-mode))
    :custom (aggressive-indent-comments-too t))
#+end_src

*** =electric-operator=

=electric-operator= is an emacs minor-mode to automatically add spacing around
operators.

#+begin_src emacs-lisp
  (use-package electric-operator
    :delight
    :hook (python-mode . electric-operator-mode))
#+end_src

*** =gnuplot=

To generate a fast and quality graphic, =gnuplot= is perfect.

#+begin_src emacs-lisp
  (use-package gnuplot
    :ensure-system-package gnuplot
    :defer 2)

  (use-package gnuplot-mode
    :after gnuplot
    :mode "\\.gp\\'")
#+end_src

*** =move-text=

Moves the current line (or if marked, the current region's, whole lines).

#+begin_src emacs-lisp
  (use-package move-text
    :bind (("M-p" . move-text-up)
           ("M-n" . move-text-down))
    :config (move-text-default-bindings))
#+end_src

*** =paradox=

Improved GNU Emacs standard package menu.

#+begin_quote
Project for modernizing Emacs' Package Menu. With improved appearance, mode-line
information. Github integration, customizability, asynchronous upgrading, and
more.

[[https://github.com/Malabarba/paradox][Artur Malabarba]]
#+end_quote

#+begin_src emacs-lisp
  (use-package paradox
    :defer 1
    :custom
    (paradox-column-width-package 27)
    (paradox-column-width-version 13)
    (paradox-execute-asynchronously t)
    (paradox-hide-wiki-packages t)
    :config
    (paradox-enable)
    (remove-hook 'paradox-after-execute-functions #'paradox--report-buffer-print))
#+end_src

*** =rainbow-mode=

Colorize colors as text with their value.

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :delight
    :hook (prog-mode))
#+end_src

**** Replace the current file with the saved one

Avoids call the function or reload Emacs.

#+begin_src emacs-lisp
  (use-package autorevert
    :ensure nil
    :delight auto-revert-mode
    :bind ("C-x R" . revert-buffer)
    :custom (auto-revert-verbose nil)
    :config (global-auto-revert-mode 1))
#+end_src

*** =try=

Useful to temporary use a package.

#+begin_src emacs-lisp
  (use-package try :defer 5)
#+end_src

*** =undo-tree=

GNU Emacs's undo system allows you to recover any past state of a buffer. To do
this, Emacs treats "undo itself as another editing that can be undone".

#+begin_src emacs-lisp
  (use-package undo-tree
    :delight
    :bind ("C--" . undo-tree-redo)
    :init (global-undo-tree-mode)
    :custom
    (undo-tree-visualizer-timestamps t)
    (undo-tree-visualizer-diff t))
#+end_src

*** =web-mode=

An autonomous emacs major-mode for editing web templates.

#+begin_src emacs-lisp
  (use-package web-mode
    :delight "☸ "
    :hook ((css-mode web-mode) . rainbow-mode)
    :mode (("\\.blade\\.php\\'" . web-mode)
           ("\\.html?\\'" . web-mode)
           ("\\.jsx\\'" . web-mode)
           ("\\.php$" . my/php-setup))
    :preface
    (defun enable-minor-mode (my-pair)
      "Enable minor mode if filename match the regexp."
      (if (buffer-file-name)
          (if (string-match (car my-pair) buffer-file-name)
              (funcall (cdr my-pair)))))
    :custom
    (web-mode-attr-indent-offset 2)
    (web-mode-block-padding 2)
    (web-mode-css-indent-offset 2)
    (web-mode-code-indent-offset 2)
    (web-mode-comment-style 2)
    (web-mode-enable-current-element-highlight t)
    (web-mode-markup-indent-offset 2))

  (add-hook 'web-mode-hook #'(lambda ()
                               (enable-minor-mode
                                '("\\.js?\\'" . prettier-js-mode))))

  (add-hook 'web-mode-hook #'(lambda ()
                               (enable-minor-mode
                                '("\\.jsx?\\'" . prettier-js-mode))))

  (add-hook 'web-mode-hook #'(lambda ()
                               (enable-minor-mode
                                '("\\.ts?\\'" . prettier-js-mode))))


  (setq web-mode-code-indent-offset                   2
        web-mode-markup-indent-offset                 2
        web-mode-css-indent-offset                    2
        web-mode-enable-html-entities-fontification   nil
        web-mode-enable-block-face                    nil
        web-mode-enable-comment-annotation            nil
        web-mode-enable-comment-interpolation         nil
        web-mode-enable-control-block-indentation     nil
        web-mode-enable-css-colorization              nil
        web-mode-enable-current-column-highlight      nil
        web-mode-enable-current-element-highlight     nil
        web-mode-enable-element-content-fontification nil
        web-mode-enable-heredoc-fontification         nil
        web-mode-enable-inlays                        nil
        web-mode-enable-optional-tags                 nil
        web-mode-enable-part-face                     nil
        web-mode-enable-sexp-functions                nil
        web-mode-enable-sql-detection                 nil
        web-mode-enable-string-interpolation          nil
        web-mode-enable-whitespace-fontification      nil
        web-mode-enable-auto-expanding                nil
        web-mode-enable-auto-indentation              nil
        web-mode-enable-auto-closing                  nil
        web-mode-enable-auto-opening                  nil
        web-mode-enable-auto-pairing                  nil
        web-mode-enable-auto-quoting                  nil)
#+end_src

*** =which-key=

It's difficult to remember all the keyboard shortcuts. The =which-key= package
helps to solve this.

I used =guide-key= in my past days, but =which-key= is a good replacement.

#+begin_src emacs-lisp
  (use-package which-key
    :defer 0.2
    :delight
    :custom (which-key-idle-delay 0.5)
    :config (which-key-mode))
#+end_src

*** =wiki-summary=

It is impossible to know everything, which is why a quick description
of a term, without breaking its workflow, is ideal.

#+begin_src emacs-lisp
  (use-package wiki-summary
    :defer 1
    :preface
    (defun my/format-summary-in-buffer (summary)
      "Given a summary, sticks it in the *wiki-summary* buffer and displays
       the buffer."
      (let ((buf (generate-new-buffer "*wiki-summary*")))
        (with-current-buffer buf
          (princ summary buf)
          (fill-paragraph)
          (goto-char (point-min))
          (view-mode))
        (pop-to-buffer buf))))

  (advice-add 'wiki-summary/format-summary-in-buffer :override #'my/format-summary-in-buffer)
#+end_src

** Icons

To integrate icons with =doom-modeline=, =switch-to-buffer=, =counsel-find-file=
and many other functions; [[https://github.com/domtronn/all-the-icons.el/][all-the-icons]] is just the best package that you can
find.

*NOTE:* if it's the first time that you install the package, you must run
=M-x all-the-icons-install-fonts=.

#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p)
    :commands all-the-icons-install-fonts
    :config (unless (find-font (font-spec :name "all-the-icons"))
              (all-the-icons-install-fonts t)))
#+end_src

** IRC

IRC is the best way for me to get a quick answer to a simple question and to
learn from more competent people than me on a subject.

Besides, for people like me, who want to store your password in a /GPG/ file,
you just need to specify a file priority list with =auth-sources=. Of course,
do not forget to add this line in your =.authinfo.gpg= file and if possible in
the first line, where /<nickname>/ and /<password>/ match your login details.

#+BEGIN_EXAMPLE
  machine irc.libera.chat login <nickname> password <password> port 6697
#+END_EXAMPLE

Then encrypt that file with =gpg -c .authinfo= and do not forget to delete the
=.authinfo= file.

** Circe

After spending many years on erc, I decided to move to =circe= which I find more
user friendly.

#+begin_src emacs-lisp
  (use-package circe
    :defer 0.5
    :preface
    (defun my-fetch-password (&rest params)
      (require 'auth-source)
      (let ((match (car (apply 'auth-source-search params))))
        (if match
            (let ((secret (plist-get match :secret)))
              (if (functionp secret)
                  (funcall secret)
                secret))
          (error "Password not found for %S" params))))

    (defun my-nickserv-password (server)
      (my-fetch-password :login "rememberYou" :machine "irc.libera.chat"))
    :custom
    (circe-network-options
     '(("Libera Chat"
        :nick "rememberYou"
        :tls t
        :port 6697
        :server-buffer-name "⇄ Libera Chat"
        :channels (:after-auth "#archlinux" "#bash" "#emacs" "#linux" "#python" "#qutebrowser" "#sway")
        :nickserv-password my-nickserv-password)))
    (circe-reduce-lurker-spam t)
    (circe-use-cycle-completion t)
    (lui-flyspell-p t)
    :config
    (circe-lagmon-mode)
    (enable-circe-color-nicks)
    (enable-circe-display-images))
#+end_src

** Ledger

#+begin_quote
Ledger is a powerful, double-entry accounting system that is accessed from the
UNIX command-line.

[[https://github.com/ledger/ledger][John Wiegley]]
#+end_quote

Before you can use this configuration, make sure you install =ledger= on your
operating system.

Now all we have to do is configure =ledger-mode=:

#+begin_src emacs-lisp
  (use-package ledger-mode
    :ensure-system-package (ledger . "yay -S --noconfirm ledger")
    :mode ("\\.\\(dat\\|ledger\\)\\'")
    :bind (:map ledger-mode-map
                ("C-x C-s" . my/ledger-save))
    :hook (ledger-mode . ledger-flymake-enable)
    :preface
    (defun my/ledger-save ()
      "Automatically clean the ledger buffer at each save."
      (interactive)
      (ledger-mode-clean-buffer)
      (save-buffer))
    :custom
    (ledger-clear-whole-transactions t)
    (ledger-reconcile-default-commodity "EUR")
    (ledger-reports
     '(("account statement" "%(binary) reg --real [[ledger-mode-flags]] -f %(ledger-file) ^%(account)")
       ("balance sheet" "%(binary) --real [[ledger-mode-flags]] -f %(ledger-file) bal ^assets ^liabilities ^equity")
       ("budget" "%(binary) --empty -S -T [[ledger-mode-flags]] -f %(ledger-file) bal ^assets:bank ^assets:receivables ^assets:cash ^assets:budget")
       ("budget goals" "%(binary) --empty -S -T [[ledger-mode-flags]] -f %(ledger-file) bal ^assets:bank ^assets:receivables ^assets:cash ^assets:'budget goals'")
       ("budget obligations" "%(binary) --empty -S -T [[ledger-mode-flags]] -f %(ledger-file) bal ^assets:bank ^assets:receivables ^assets:cash ^assets:'budget obligations'")
       ("budget debts" "%(binary) --empty -S -T [[ledger-mode-flags]] -f %(ledger-file) bal ^assets:bank ^assets:receivables ^assets:cash ^assets:'budget debts'")
       ("cleared" "%(binary) cleared [[ledger-mode-flags]] -f %(ledger-file)")
       ("equity" "%(binary) --real [[ledger-mode-flags]] -f %(ledger-file) equity")
       ("income statement" "%(binary) --invert --real -S -T [[ledger-mode-flags]] -f %(ledger-file) bal ^income ^expenses -p \"this month\""))
     (ledger-report-use-header-line nil)))

  (use-package flycheck-ledger :after ledger-mode)
#+end_src

*NOTE:* by default, =ledger= uses the [[ https://xkcd.com/1179/][ISO 8601]] format to write dates, which is the recommended
format.

** Linters

Flycheck lints warnings and errors directly within buffers.

#+begin_src emacs-lisp
  (use-package flycheck
    :defer 2
    :delight
    :init (global-flycheck-mode)
    :custom
    (flycheck-display-errors-delay .3)
    (flycheck-pylintrc "~/.pylintrc")
    (flycheck-python-pylint-executable "/usr/bin/pylint")
    (flycheck-stylelintrc "~/.stylelintrc.json")
    :config
    (flycheck-add-mode 'javascript-eslint 'web-mode)
    (flycheck-add-mode 'typescript-tslint 'web-mode))
#+end_src

** Mails

After trying =gnus= that I found too old and =notmuch= that in my opinion lacks
features like the ability to delete some emails and be able to write emails
easily with =org=, I finally found my happiness with =mu4e=.

I use =mbsync= to synchronize emails on IMAP server with local mails dir folder. I
used =offlineimap=, but I find it slower than =mbsync=.

*NOTE:* to use =mbsync= with your Gmail account, you will need to enable access
for less secure apps in your Google account.

*** mu4e

Before you can use this configuration, make sure you install =mu= on your
operating system and create directories corresponding to those in your mailbox.

Then, initialize the =mu= database, by replacing values of =--maildir= and
=--my-address= with yours:

#+begin_src shell
  mu init --maildir ~/mails --my-address=${EMAIL}
#+end_src

Now all that remains is to configure =mu4e=:

#+begin_src emacs-lisp
  (use-package mu4e
    :ensure nil
    :ensure-system-package mu
    :commands mu4e
    :hook (mu4e-compose-mode . turn-off-auto-fill)
    :bind (:map mu4e-headers-mode-map
                ("M-[" . scroll-down-command)
                ("M-]" . scroll-up-command))
    :preface
    (defun my/set-email-account (label letvars)
      "Registers an email address for mu4e."
      (setq mu4e-contexts
            (cl-loop for context in mu4e-contexts
                     unless (string= (mu4e-context-name context) label)
                     collect context))
      (let ((context (make-mu4e-context
                      :name label
                      :enter-func (lambda () (mu4e-message "Switched context"))
                      :leave-func #'mu4e-clear-caches
                      :match-func
                      (lambda (msg)
                        (when msg
                          (string-prefix-p (format "/%s" msg)
                                           (mu4e-message-field msg :maildir))))
                      :vars letvars)))
        (push context mu4e-contexts)
        context))
    :custom
    (mu4e-attachment-dir "~/downloads")
    ;; To avoid synchronization issues/ with mbsync
    (mu4e-change-filenames-when-moving t)
    (mu4e-confirm-quit nil)
    (mu4e-completing-read-function 'ivy-read)
    (mu4e-compose-complete-only-after (format-time-string
                                       "%Y-%m-%d"
                                       (time-subtract (current-time) (days-to-time 150))))
    (mu4e-compose-context-policy 'ask-if-none)
    (mu4e-compose-dont-reply-to-self t)
    (mu4e-compose-format-flowed t)
    (mu4e-get-mail-command (format "mbsync -c '%s/isync/mbsyncrc' -a" xdg-config))
    (mu4e-headers-date-format "%F")
    (mu4e-headers-fields
     '((:account    . 10)
       (:human-date . 12)
       (:flags      . 6)
       (:from       . 22)
       (:subject    . nil)))
    (mu4e-headers-time-format "%R")
    (mu4e-html2text-command "iconv -c -t utf-8 | pandoc -f html -t plain")
    (mu4e-maildir "~/mails")
    (mu4e-org-contacts-file "~/.personal/agenda/contacts.org")
    (mu4e-update-interval (* 5 60))
    (mu4e-use-fancy-chars t)
    (mu4e-view-prefer-html t)
    (mu4e-view-show-addresses t)
    (mu4e-view-show-images t)
    :config
    (my/set-email-account "erroriamnotfound"
                          '((mu4e-drafts-folder . "/personal/erroriamnotfound/drafts")
                            (mu4e-refile-folder . "/personal/erroriamnotfound/all")
                            (mu4e-sent-folder   . "/personal/erroriamnotfound/sent")
                            (mu4e-trash-folder  . "/personal/erroriamnotfound/trash")
                            (mu4e-maildir-shortcuts . ((:maildir "/personal/erroriamnotfound/all"    :key ?a)
                                                       (:maildir "/personal/erroriamnotfound/inbox"  :key ?i)
                                                       (:maildir "/personal/erroriamnotfound/drafts" :key ?d)
                                                       (:maildir "/personal/erroriamnotfound/sent"   :key ?s)
                                                       (:maildir "/personal/erroriamnotfound/trash"  :key ?t)))
                            (smtpmail-smtp-user . "erroriamnotfound@gmail.com")
                            (smtpmail-smtp-server . "smtp.gmail.com")
                            (smtpmail-smtp-service . 465)
                            (smtpmail-stream-type . ssl)
                            (user-mail-address . "erroriamnotfound@gmail.com")
                            (user-full-name . "Who Cares")))
    (my/set-email-account "terencio.agozzino"
                          '((mu4e-drafts-folder . "/personal/terencio-agozzino/drafts")
                            (mu4e-refile-folder . "/personal/terencio-agozzino/all")
                            (mu4e-sent-folder   . "/personal/terencio-agozzino/sent")
                            (mu4e-trash-folder  . "/personal/terencio-agozzino/trash")
                            (mu4e-maildir-shortcuts . ((:maildir "/personal/terencio-agozzino/all"    :key ?a)
                                                       (:maildir "/personal/terencio-agozzino/inbox"  :key ?i)
                                                       (:maildir "/personal/terencio-agozzino/drafts" :key ?d)
                                                       (:maildir "/personal/terencio-agozzino/sent"   :key ?s)
                                                       (:maildir "/personal/terencio-agozzino/trash"  :key ?t)))
                            (smtpmail-smtp-user . "terencio.agozzino@gmail.com")
                            (smtpmail-smtp-server . "smtp.gmail.com")
                            (smtpmail-smtp-service . 465)
                            (smtpmail-stream-type . ssl)
                            (user-mail-address . "terencio.agozzino@gmail.com")
                            (user-full-name . "Terencio Agozzino")))
    (setq mu4e-headers-attach-mark    `("a" . ,(with-faicon "paperclip" "" 0.75 -0.05 "all-the-icons-lyellow"))
          mu4e-headers-draft-mark     `("D" . ,(with-octicon "pencil" "" 0.75 -0.05 "all-the-icons-lsilver"))
          mu4e-headers-encrypted-mark `("x" . ,(with-faicon "lock" "" 0.75 -0.05 "all-the-icons-lred"))
          mu4e-headers-flagged-mark   `("F" . ,(with-faicon "flag" "" 0.75 -0.05 "all-the-icons-maroon"))
          mu4e-headers-new-mark       `("N" . ,(with-faicon "check-circle" "" 0.75 -0.05 "all-the-icons-silver"))
          mu4e-headers-passed-mark    `("P" . ,(with-faicon "share" "" 0.75 -0.05 "all-the-icons-purple "))
          mu4e-headers-replied-mark   `("R" . ,(with-faicon "reply" "" 0.75 -0.05 "all-the-icons-lgreen"))
          mu4e-headers-seen-mark      `("S" . ,(with-octicon "check" "" 1 -0.05 "all-the-icons-lgreen"))
          mu4e-headers-signed-mark    `("s" . ,(with-faicon "key" "" 0.75 -0.05 "all-the-icons-cyan"))
          mu4e-headers-trashed-mark   `("T" . ,(with-faicon "trash" "" 0.75 -0.05 "all-the-icons-lred"))
          mu4e-headers-unread-mark    `("u" . ,(with-faicon "envelope" "" 0.75 -0.05 "all-the-icons-silver")))
    (add-to-list 'mu4e-header-info-custom
                 '(:account
                   :name "Account"
                   :shortname "Account"
                   :help "Which account this email belongs to"
                   :function
                   (lambda (msg)
                     (let ((maildir (mu4e-message-field msg :maildir)))
                       (format "%s" (substring maildir 1 (string-match-p "/" maildir 1)))))))
    (add-to-list 'mu4e-headers-actions '("org-contact-add" . mu4e-action-add-org-contact) t)
    (add-to-list 'mu4e-view-actions '("org-contact-add" . mu4e-action-add-org-contact) t))
#+end_src

To edit my emails in =org-mode=, I use =org-mime=. It also to add a signature,
automatically convert Org in HTML, and custom some HTML elements.

#+begin_src emacs-lisp
  (use-package org-mime
    :after mu4e
    :hook (message-send . org-mime-htmlize)
    :bind (:map mu4e-compose-mode-map
                ("C-c '" . org-mime-edit-mail-in-org-mode))
    :config
    (add-hook 'org-mime-html-hook (lambda ()
                                    (goto-char (point-max))
                                    (insert "--<br>
                   <strong>Terencio Agozzino</strong><br>
                   Machine Learning Engineer
                   <br>
                   <span style='text-decoration:none; color:#000;'>(+32) 495 45 29 07</span>")))
    (add-hook 'org-mime-html-hook (lambda ()
                                    (org-mime-change-element-style "p" (format "color: %s" "#1a1a1a"))))

    (add-hook 'org-mime-html-hook (lambda ()
                                    (org-mime-change-element-style "strong" (format "color: %s" "#000"))))

    (add-hook 'org-mime-html-hook (lambda ()
                                    (org-mime-change-element-style
                                     "pre" "background: none repeat scroll 0% 0% rgb(61, 61, 61);
                                                   border-radius: 15px;
                                                   color: #eceff4;
                                                   font-family: Courier, 'Courier New', monospace;
                                                   font-size: small;
                                                   font-weight: 400;
                                                   line-height: 1.3em;
                                                   padding: 20px;
                                                   quotes: '«' '»';
                                                   width: 41%;")))
    (setq org-mime-export-options '(:preserve-breaks t
                                                     :section-numbers nil
                                                     :with-author nil
                                                     :with-toc nil)))
#+end_src
Being able to read mails is a good thing, but being notified when we receive
mails is better! The following few lines allow you to receive desktop
notifications and modeline display for =mu4e=:

#+begin_src emacs-lisp
  (use-package mu4e-alert
    :after mu4e
    :hook ((after-init . mu4e-alert-enable-mode-line-display)
           (after-init . mu4e-alert-enable-notifications))
    :config (mu4e-alert-set-default-style 'libnotify))
#+end_src

*** Sending Mail

Before you can send mails, create the =.authinfo= file if it is not already
done. Then add the following two lines replacing /terencio.agozzino/ (which
corresponds to my gmail address terencio.agozzino@gmail.com without the domain
name) and /<password>/ by those that match your real information:

#+BEGIN_EXAMPLE
  machine imap.gmail.com login terencio.agozzino@gmail.com password <password> port 993
  machine smtp.gmail.com login terencio.agozzino@gmail.com password <password> port 587
#+END_EXAMPLE

Similar to IRC, if you want to store your password in a /GPG/ file, you just
need to specify a file priority list with =auth-sources=, to tell GNU Emacs
where to start looking for your password first.

Then encrypt that file with =gpg -c .authinfo= and don't forget to delete the
=.authinfo= file.

#+begin_src emacs-lisp
  (use-package message
    :ensure nil
    :after mu4e
    :custom
    (message-citation-line-format "On %B %e, %Y at %l:%M %p, %f (%n) wrote:\n")
    (message-citation-line-function 'message-insert-formatted-citation-line)
    (message-kill-buffer-on-exit t)
    (message-send-mail-function 'smtpmail-send-it)
    (mml-secure-openpgp-signers '("208FCDBB98190562")))
#+end_src

All you need now is to test sending your mails with =C-x m= or directly from
=mu4e=!

** Navigation

Navigation is an important part of productivity. The next function is a more
efficient way to go to the beginning of a line with =move-beginning-of-line=
(=C-a=) and =back-to-indentation= (=M-m=).

*FROM:* http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/

#+begin_src emacs-lisp
  (defun my/smarter-move-beginning-of-line (arg)
    "Moves point back to indentation of beginning of line.

     Move point to the first non-whitespace character on this line.
     If point is already there, move to the beginning of the line.
     Effectively toggle between the first non-whitespace character and
     the beginning of the line.

     If ARG is not nil or 1, move forward ARG - 1 lines first. If
     point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

  (global-set-key (kbd "C-a") 'my/smarter-move-beginning-of-line)

  (use-package imenu
    :ensure nil
    :bind ("C-r" . imenu))
#+end_src

** Network

It is sometimes useful to have information about an IP address and to calculate
an IP address range.

#+begin_src emacs-lisp
  (use-package ipcalc :defer 4)

  (defun ipinfo (ip)
    "Returns the detail of an IP address from a certain IP, using ipinfo.io"
    (interactive "sEnter IP to query (blank for own IP): ")
    (request
     (concat "https://ipinfo.io/" ip)
     :headers '(("User-Agent" . "Emacs ipinfo.io Client")
                ("Accept" . "application/json")
                ("Content-Type" . "application/json;charset=utf-8"))
     :parser 'json-read
     :success (cl-function
               (lambda (&key data &allow-other-keys)
                 (message
                  (mapconcat
                   (lambda (e)
                     (format "%10s: %s" (capitalize (symbol-name (car e))) (cdr e)))
                   data "\n"))))
     :error (cl-function (lambda (&rest args &key error-thrown &allow-other-keys)
                           (message "Can't receive ipinfo. Error %S " error-thrown)))))
#+end_src

** Parentheses

Managing parentheses can be painful. One of the first things you want to do is
to change the appearance of the highlight of the parentheses pairs.

#+begin_src emacs-lisp
  (use-package faces
    :ensure nil
    :custom (show-paren-delay 0)
    :config
    (set-face-background 'show-paren-match "#262b36")
    (set-face-bold 'show-paren-match t)
    (set-face-foreground 'show-paren-match "#ffffff"))
#+end_src

*** =rainbow-delimiters=

#+begin_quote
rainbow-delimiters is a "rainbow parentheses"-like mode which highlights
delimiters such as parentheses, brackets or braces according to their
depth. Each successive level is highlighted in a different color. This makes it
easy to spot matching delimiters, orient yourself in the code, and tell which
statements are at a given depth.

[[https://github.com/Fanael/rainbow-delimiters][Fanael Linithien]]
#+end_quote

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** =smartparens=

In my opinion, it is the most powerful package to deal with the
parenthesis. Anyway, if you don't like it, you can try taking a look at
=paredit= or =autopair=.

#+begin_src emacs-lisp
  (use-package smartparens
    :defer 1
    :delight
    :custom (sp-escape-quotes-after-insert nil)
    :config (smartparens-global-mode 1))
#+end_src

** Paste

#+begin_quote
This mode allows to paste whole buffers or parts of buffers to pastebin-like
services. It supports more than one service and will failover if one service
fails.

[[https://github.com/etu/webpaste.el][Elis Hirwing]]
#+end_quote

#+begin_src emacs-lisp
  (use-package webpaste :defer 1)
#+end_src

Same principle for images with =imgbb=. This package selects an image
and upload it to [[https://imgbb.com/][imgbb]], making sure to display the URL of the image in
the minibuffer and place it in the kill ring.

#+begin_src emacs-lisp
  (use-package imgbb :defer 2)
#+end_src

** PDF

#+begin_quote
PDF Tools is, among other things, a replacement of DocView for PDF files. The
key difference is that pages are not pre-rendered by e.g. ghostscript and stored
in the file-system, but rather created on-demand and stored in memory.

[[https://github.com/politza/pdf-tools][Andras Politz]]
#+end_quote

#+begin_src emacs-lisp
  (use-package pdf-tools
    :defer 1
    :magic ("%PDF" . pdf-view-mode)
    :init (pdf-tools-install :no-query))

  (use-package pdf-view
    :ensure nil
    :after pdf-tools
    :bind (:map pdf-view-mode-map
                ("C-s" . isearch-forward)
                ("d" . pdf-annot-delete)
                ("h" . pdf-annot-add-highlight-markup-annotation)
                ("t" . pdf-annot-add-text-annotation))
    :custom
    (pdf-view-display-size 'fit-page)
    (pdf-view-resize-factor 1.1)
    (pdf-view-use-unicode-ligther nil))
#+end_src

** Point and Region

Increase region by semantic units. It tries to be smart about it and adapt to
the structure of the current major mode.

#+begin_src emacs-lisp
  (use-package expand-region
    :bind (("C-+" . er/contract-region)
           ("C-=" . er/expand-region)))
#+end_src

I find it useful to delete a line and a region with only =C-w=.

#+begin_src emacs-lisp
  (defadvice kill-region (before slick-cut activate compile)
    "When called interactively with no active region, kill a single line instead."
    (interactive
     (if mark-active (list (region-beginning) (region-end))
       (list (line-beginning-position)
             (line-beginning-position 2)))))
#+end_src

** Projectile

#+begin_quote
Projectile is a project interaction library for Emacs. Its goal is to provide a
nice set of features operating on a project level without introducing external
dependencies (when feasible). For instance - finding project files has a
portable implementation written in pure Emacs Lisp without the use of GNU find
(but for performance sake an indexing mechanism backed by external commands
exists as well).

[[https://github.com/bbatsov/projectile][Bozhidar Batsov]]
#+end_quote

#+begin_src emacs-lisp
  (use-package projectile
    :hook (after-init . projectile-mode)
    :preface
    (defun my/projectile-compilation-buffers (&optional project)
      "Get a list of a project's compilation buffers.
    If PROJECT is not specified the command acts on the current project."
      (let* ((project-root (or project (projectile-project-root)))
             (buffer-list (mapcar #'process-buffer compilation-in-progress))
             (all-buffers (cl-remove-if-not
                           (lambda (buffer)
                             (projectile-project-buffer-p buffer project-root))
                           buffer-list)))
        (if projectile-buffers-filter-function
            (funcall projectile-buffers-filter-function all-buffers)
          all-buffers)))
    :custom
    (projectile-cache-file (expand-file-name (format "%s/emacs/projectile.cache" xdg-cache)))
    (projectile-completion-system 'ivy)
    (projectile-enable-caching t)
    (projectile-keymap-prefix (kbd "C-c C-p"))
    (when (file-directory-p (expand-file-name (format "%s/git" xdg-data)))
      (projectile-project-search-path '(expand-file-name (format "%s/git" xdg-data))))
    (projectile-known-projects-file (expand-file-name (format "%s/emacs/projectile-bookmarks.eld" xdg-cache)))
    (projectile-mode-line '(:eval (projectile-project-name)))
    (projectile-switch-project-action #'projectile-dired)
    :config (projectile-global-mode))

  (use-package counsel-projectile
    :after (counsel projectile)
    :config (counsel-projectile-mode 1))
#+end_src

** Recent Files

Provides fast access to the recent files.

#+begin_src emacs-lisp
  (use-package recentf
    :bind ("C-c r" . recentf-open-files)
    :init (recentf-mode)
    :custom
    (recentf-exclude (list "COMMIT_EDITMSG"
                           "~$"
                           "/scp:"
                           "/ssh:"
                           "/sudo:"
                           "/tmp/"))
    (recentf-max-menu-items 15)
    (recentf-max-saved-items 200)
    (recentf-save-file (expand-file-name (format "%s/emacs/recentf" xdg-cache)))
    :config (run-at-time nil (* 5 60) 'recentf-save-list))
#+end_src

** Requests

Let's follow the [[https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html][XDG base directory specification]] for the request and cookies
files, in order to make =~/.emacs.d= a cleaner place.

#+begin_src emacs-lisp
  (use-package request
    :ensure nil
    :custom
    (request-storage-directory (expand-file-name (format "%s/emacs/request/" xdg-data))))

  (use-package url-cookie
    :ensure nil
    :custom
    (url-cookie-file (expand-file-name (format "%s/emacs/url/cookies/" xdg-data))))
#+end_src

** Reveal.js

I tend to use Beamer for scientific presentations, and Reveal.js for others.

#+begin_src emacs-lisp
  (use-package org-re-reveal
    :after org
    :custom
    (org-reveal-mathjax t)
    (org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/"))
#+end_src

** Version Control

It is quite common to work on Git repositories, so it is important to have a
configuration that we like.

#+begin_quote
[[https://github.com/magit/magit][Magit]] is an interface to the version control system Git, implemented as an Emacs
package. Magit aspires to be a complete Git porcelain. While we cannot (yet)
claim that Magit wraps and improves upon each and every Git command, it is
complete enough to allow even experienced Git users to perform almost all of
their daily version control tasks directly from within Emacs. While many fine
Git clients exist, only Magit and Git itself deserve to be called porcelains.

[[https://github.com/tarsius][Jonas Bernoulli]]
#+end_quote

#+begin_src emacs-lisp
  (use-package git-commit
    :after magit
    :preface
    (defun my/git-commit-auto-fill-everywhere ()
      "Ensures that the commit body does not exceed 72 characters."
      (setq fill-column 72)
      (setq-local comment-auto-fill-only-comments nil))
    :hook (git-commit-mode . my/git-commit-auto-fill-everywhere)
    :custom (git-commit-summary-max-length 50))

  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (use-package smerge-mode
    :after hydra
    :hook (magit-diff-visit-file . (lambda ()
                                     (when smerge-mode
                                       (hydra-merge/body)))))
#+end_src

In addition to that, I like to see the lines that are being modified in the file
while it is being edited.

#+begin_src emacs-lisp
  (use-package git-gutter
    :defer 0.3
    :delight
    :init (global-git-gutter-mode +1))
#+end_src

Finally, one last package that I like to use with Git to easily see the changes
made by previous commits.

#+begin_src emacs-lisp
  (use-package git-timemachine
    :defer 1
    :delight)
#+end_src

** Whitespaces

It is often annoying to see unnecessary blank spaces at the end of a line or
file. Let's get ride of them:

#+begin_src emacs-lisp
  (use-package simple
    :ensure nil
    :hook (before-save . delete-trailing-whitespace))
#+end_src

*** =hungry-delete=

#+begin_quote
Deleting a whitespace character will delete all whitespace until the next
non-whitespace character.

[[https://github.com/nflath/hungry-delete][Nathaniel Flath]]
#+end_quote

#+begin_src emacs-lisp
  (use-package hungry-delete
    :defer 0.7
    :delight
    :config (global-hungry-delete-mode))
#+end_src

** Word Wrap

I like to have lines of the same length.

#+begin_src emacs-lisp
  (use-package simple
    :ensure nil
    :delight (auto-fill-function)
    :bind ("C-x p" . pop-to-mark-command)
    :hook ((prog-mode . turn-on-auto-fill)
           (text-mode . turn-on-auto-fill))
    :custom (set-mark-command-repeat-pop t))
#+end_src

** YASnippet

#+begin_quote
YASnippet is a template system for Emacs. It allows you to type an abbreviation
and automatically expand it into function templates.

[[https://github.com/joaotavora/yasnippet][João Távora]]
#+end_quote

#+begin_src emacs-lisp
  (use-package yasnippet-snippets
    :after yasnippet
    :config (yasnippet-snippets-initialize))

  (use-package yasnippet
    :delight yas-minor-mode " υ"
    :hook (yas-minor-mode . my/disable-yas-if-no-snippets)
    :config (yas-global-mode)
    :preface
    (defun my/disable-yas-if-no-snippets ()
      (when (and yas-minor-mode (null (yas--get-snippet-tables)))
        (yas-minor-mode -1))))

  (use-package ivy-yasnippet :after yasnippet)
  (use-package react-snippets :after yasnippet)
#+end_src

* Org-Mode

One of my favorite modes in GNU Emacs. I mainly use it to organize my life, take
notes and make my presentations, but you can do lots of things with
it. =org-mode= it's like the sky, without limits.

#+begin_quote
Org mode is for keeping notes, maintaining TODO lists, planning projects, and
authoring documents with a fast and effective plain-text system.

[[http://orgmode.org/][Carsten Dominik]]
#+end_quote

#+begin_src emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :delight "Θ "
    :hook (org-mode . turn-off-auto-fill)
    :bind ("C-c i" . org-insert-structure-template)
    :preface
    (defun my/org-archive-done-tasks ()
      "Archives finished or cancelled tasks."
      (interactive)
      (org-map-entries
       (lambda ()
         (org-archive-subtree)
         (setq org-map-continue-from (outline-previous-heading)))
       "TODO=\"DONE\"|TODO=\"CANCELLED\"" (if (org-before-first-heading-p) 'file 'tree)))

    (defun my/org-compare-times (clocked estimated)
      "Gets the ratio between the timed time and the estimated time."
      (if (and (> (length clocked) 0) estimated)
          (format "%.2f"
                  (/ (* 1.0 (org-hh:mm-string-to-minutes clocked))
                     (org-hh:mm-string-to-minutes estimated)))
        ""))

    (defun my/org-jump ()
      "Jumps to a specific task."
      (interactive)
      (let ((current-prefix-arg '(4)))
        (call-interactively 'org-refile)))

    (defun my/org-use-speed-commands-for-headings-and-lists ()
      "Activates speed commands on list items too."
      (or (and (looking-at org-outline-regexp) (looking-back "^\**"))
          (save-excursion (and (looking-at (org-item-re)) (looking-back "^[ \t]*")))))

    (defmacro ignore-args (fnc)
      "Returns function that ignores its arguments and invokes FNC."
      `(lambda (&rest _rest)
         (funcall ,fnc)))
    :hook ((after-save . my/config-tangle)
           (auto-save . org-save-all-org-buffers)
           (org-mode . org-indent-mode)
           (org-mode . visual-line-mode))
    :custom
    (org-archive-location "~/.personal/archives/%s::")
    (org-blank-before-new-entry '((heading . t)
                                  (plain-list-item . t)))
    (org-confirm-babel-evaluate nil)
    (org-cycle-include-plain-lists 'integrate)
    (org-ditaa-jar-path "~/.local/lib/ditaa0_9.jar")
    (org-ellipsis " ▾")
    (org-expiry-inactive-timestamps t)
    (org-export-backends '(ascii beamer html icalendar latex man md org texinfo))
    (org-hide-emphasis-markers t)
    (org-log-done 'time)
    (org-log-into-drawer t)
    (org-modules '(org-crypt
                   org-habit
                   org-mouse
                   org-protocol
                   org-tempo))
    (org-refile-allow-creating-parent-nodes 'confirm)
    (org-refile-use-cache nil)
    (org-refile-use-outline-path nil)
    (org-refile-targets '((org-agenda-files . (:maxlevel . 1))))
    (org-startup-folded nil)
    (org-startup-with-inline-images t)
    (org-tag-alist
     '((:startgroup . "Context")
       ("@errands" . ?e)
       ("@home" . ?h)
       ("@work" . ?w)
       (:endgroup)
       (:startgroup . "Difficulty")
       ("easy" . ?E)
       ("medium" . ?M)
       ("challenging" . ?C)
       (:endgroup)
       ("bug" . ?b)
       ("car" . ?v)
       ("future" . ?F)
       ("goal" . ?g)
       ("health" . ?H)
       ("house" . ?O)
       ("meeting" . ?m)
       ("planning" . ?p)
       ("phone" . ?0)
       ("purchase" . ?P)
       ("reading" . ?r)
       ("review" . ?R)
       ("study" . ?s)
       ("sport" . ?S)
       ("talk" . ?T)
       ("tech" . ?t)
       ("trip" . ?I)
       ("thinking" . ?i)
       ("update" . ?u)
       ("watch" . ?W)
       ("writing" . ?g)))
    (org-tags-exclude-from-inheritance '("crypt" "project"))
    (org-todo-keywords '((sequence "TODO(t)"
                                   "STARTED(s)"
                                   "NEXT(n)"
                                   "SOMEDAY(.)"
                                   "WAITING(w)""|" "DONE(x!)" "CANCELLED(c@)")))
    (org-use-effective-time t)
    (org-use-speed-commands 'my/org-use-speed-commands-for-headings-and-lists)
    (org-yank-adjusted-subtrees t)
    :config
    (add-to-list 'org-global-properties '("Effort_ALL". "0:05 0:15 0:30 1:00 2:00 3:00 4:00"))
    (add-to-list 'org-speed-commands-user '("!" my/org-clock-in-and-track))
    (add-to-list 'org-speed-commands-user '("$" call-interactively 'org-archive-subtree))
    (add-to-list 'org-speed-commands-user '("d" my/org-move-line-to-destination))
    (add-to-list 'org-speed-commands-user '("i" call-interactively 'org-clock-in))
    (add-to-list 'org-speed-commands-user '("o" call-interactively 'org-clock-out))
    (add-to-list 'org-speed-commands-user '("s" call-interactively 'org-schedule))
    (add-to-list 'org-speed-commands-user '("x" org-todo "DONE"))
    (add-to-list 'org-speed-commands-user '("y" org-todo-yesterday "DONE"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (advice-add 'org-deadline :after (ignore-args #'org-save-all-org-buffers))
    (advice-add 'org-refile :after 'org-save-all-org-buffers)
    (advice-add 'org-schedule :after (ignore-args #'org-save-all-org-buffers))
    (advice-add 'org-store-log-note :after (ignore-args #'org-save-all-org-buffers))
    (advice-add 'org-todo :after (ignore-args #'org-save-all-org-buffers))
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
    (org-clock-persistence-insinuate)
    (org-load-modules-maybe t))
#+end_src

If like me, you're tired of manually updating your tables of contents, =toc-org=
will maintain a table of contents at the first heading that has a =:TOC:= tag.

#+begin_src emacs-lisp
  (use-package toc-org
    :after org
    :hook (org-mode . toc-org-enable))
#+end_src

For a cleaner online mode.

#+begin_src emacs-lisp
  (use-package org-indent :ensure nil :after org :delight)
#+end_src

** Agenda

Nowadays, it is crucial to be organized. Even more than before. That is why it
is important to take the time to make a configuration that is simple to use and
that makes your life easier with an irreproachable organization.

=org-agenda= allows me to be organized with daily tasks. As a result, I can use
my time to the fullest.

I put my =org= files in [[https://github.com/syncthing/syncthing][Syncthing]] in order to be able to check my agenda and
update it from several computers and smartphones.

#+begin_src emacs-lisp
  (use-package org-agenda
    :ensure nil
    :bind (:map org-agenda-mode-map
                ("X" . my/org-agenda-mark-done-and-add-followup)
                ("x" . my/org-agenda-done))
    :preface
    (defun my/org-agenda-done (&optional arg)
      "Mark current TODO as done.
    This changes the line at point, all other lines in the agenda referring to
    the same tree node, and the headline of the tree node in the Org-mode file."
      (interactive "P")
      (org-agenda-todo "DONE"))

    (defun my/org-agenda-mark-done-and-add-followup ()
      "Mark the current TODO as done and add another task after it.
     Creates it at the same level as the previous task, so it's better to use
     this with to-do items than with projects or headings."
      (interactive)
      (org-agenda-todo "DONE")
      (org-agenda-switch-to)
      (org-capture 0 "t"))
    :custom
    (org-agenda-category-icon-alist
    `(("home" ,(list (all-the-icons-faicon "home" :v-adjust -0.05)) nil nil :ascent center :mask heuristic)
      ("inbox" ,(list (all-the-icons-faicon "inbox" :v-adjust -0.1)) nil nil :ascent center :mask heuristic)
      ("people" ,(list (all-the-icons-material "people" :v-adjust -0.25)) nil nil :ascent center :mask heuristic)
      ("routine" ,(list (all-the-icons-material "repeat":v-adjust -0.25)) nil nil :ascent center :mask heuristic)
      ))
    (org-agenda-custom-commands
     '(("d" "Dashboard"
        ((agenda "" ((org-deadline-warning-days 7)))
         (todo "NEXT"
               ((org-agenda-overriding-header "Next Tasks")))
         (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

       ("n" "Next Tasks"
        ((agenda "" ((org-deadline-warning-days 7)))
         (todo "NEXT"
               ((org-agenda-overriding-header "Next Tasks")))))

       ("h" "Home Tasks" tags-todo "+home")
       ("w" "Work Tasks" tags-todo "+work")

       ("E" "Easy Tasks" tags-todo "+easy")
       ("C" "Challenging Tasks" tags-todo "+challenging")

       ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
        ((org-agenda-overriding-header "Low Effort Tasks")
         (org-agenda-max-todos 20)
         (org-agenda-files org-agenda-files)))))
    (org-agenda-dim-blocked-tasks t)
    (org-agenda-files '("~/.personal/agenda"))
    (org-agenda-inhibit-startup t)
    (org-agenda-show-log t)
    (org-agenda-skip-deadline-if-done t)
    (org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
    (org-agenda-skip-scheduled-if-done t)
    (org-agenda-span 2)
    (org-agenda-start-on-weekday 6)
    (org-agenda-start-with-log-mode t)
    (org-agenda-sticky nil)
    (org-agenda-tags-column 90)
    (org-agenda-time-grid '((daily today require-timed)))
    (org-agenda-use-tag-inheritance t)
    (org-columns-default-format "%14SCHEDULED %Effort{:} %1PRIORITY %TODO %50ITEM %TAGS")
    (org-default-notes-file "~/.personal/agenda/inbox.org")
    (org-directory "~/.personal")
    (org-enforce-todo-dependencies t)
    (org-habit-completed-glyph ?✓)
    (org-habit-graph-column 80)
    (org-habit-show-habits-only-for-today nil)
    (org-habit-today-glyph ?‖)
    (org-track-ordered-property-with-tag t))
#+end_src

** Bullets

Prettier [[https://github.com/sabof/org-bullets][bullets]] in org-mode.

#+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom (org-bullets-bullet-list '("●" "►" "▸")))
#+end_src

** Capture

=org-capture= templates saves you a lot of time when adding new entries. I use
it to quickly record tasks, ledger entries, notes and other semi-structured
information.

#+begin_src emacs-lisp
  (use-package org-capture
    :ensure nil
    :preface
    (defvar my/org-active-task-template
      (concat "* NEXT %^{Task}\n"
              ":PROPERTIES:\n"
              ":Effort: %^{effort|1:00|0:05|0:15|0:30|2:00|4:00}\n"
              ":CAPTURED: %<%Y-%m-%d %H:%M>\n"
              ":END:") "Template for basic task.")
    (defvar my/org-appointment
      (concat "* TODO %^{Appointment}\n"
              "SCHEDULED: %t\n") "Template for appointment task.")
    (defvar my/org-basic-task-template
      (concat "* TODO %^{Task}\n"
              ":PROPERTIES:\n"
              ":Effort: %^{effort|1:00|0:05|0:15|0:30|2:00|4:00}\n"
              ":CAPTURED: %<%Y-%m-%d %H:%M>\n"
              ":END:") "Template for basic task.")
    (defvar my/org-contacts-template
      (concat "* %(org-contacts-template-name)\n"
              ":PROPERTIES:\n"
              ":BIRTHDAY: %^{YYYY-MM-DD}\n"
              ":END:") "Template for a contact.")
    :custom
    (org-capture-templates
     `(
       ("c" "Contact" entry (file+headline "~/.personal/agenda/contacts.org" "Friends"),
        my/org-contacts-template
        :empty-lines 1)

       ("p" "People" entry (file+headline "~/.personal/agenda/people.org" "Tasks"),
        my/org-basic-task-template
        :empty-lines 1)
       ("a" "Appointment" entry (file+headline "~/.personal/agenda/people.org" "Appointments"),
        my/org-appointment
        :empty-lines 1)
       ("m" "Meeting" entry (file+headline "~/.personal/agenda/people.org" "Meetings")
        "* Meeting with %? :meeting:\n%U" :clock-in t :clock-resume t :empty-lines 1)
       ("P" "Phone Call" entry (file+headline "~/.personal/agenda/people.org" "Phone Calls")
        "* Phone %? :phone:\n%U" :clock-in t :clock-resume t)

       ("i" "New Item")
       ("ib" "Book" checkitem (file+headline "~/.personal/items/books.org" "Books")
        "- [ ] %^{Title} -- %^{Author} %? :@home:reading:\n%U"
        :immediate-finish t)
       ("il" "Learning" checkitem (file+headline "~/.personal/items/learning.org" "Things")
        "- [ ] %^{Thing} :@home:"
        :immediate-finish t)
       ("im" "Movie" checkitem (file+headline "~/.personal/items/movies.org" "Movies")
        "- [ ] %^{Title}  :@home:watch:\n%U"
        :immediate-finish t)
       ("ip" "Purchase" checkitem (file+headline "~/.personal/items/purchases.org" "Purchases")
        "- [ ] %^{Item}  :@home:purchase:\n%U"
        :immediate-finish t)

       ("t" "New Task")
       ("ta" "Active" entry (file+headline "~/.personal/agenda/inbox.org" "Active"),
        my/org-active-task-template
        :empty-lines 1
        :immediate-finish t)
       ("tb" "Backlog" entry (file+headline "~/.personal/agenda/inbox.org" "Backlog"),
        my/org-basic-task-template
        :empty-lines 1
        :immediate-finish t))))
#+end_src

** Clock

Being organized is one thing, but being optimal is another. =org-clock= allows
you to estimate your tasks and time them. This is useful, since with experience,
you can have a better estimate of the time that needs to be given to each task.

#+begin_src emacs-lisp
  (use-package org-clock
    :ensure nil
    :after org
    :preface
    (defun my/org-mode-ask-effort ()
      "Ask for an effort estimate when clocking in."
      (unless (org-entry-get (point) "Effort")
        (let ((effort
               (completing-read
                "Effort: "
                (org-entry-get-multivalued-property (point) "Effort"))))
          (unless (equal effort "")
            (org-set-property "Effort" effort)))))
    :hook (org-clock-in-prepare-hook . my/org-mode-ask-effort)
    :custom
    (org-clock-clocktable-default-properties
     '(:block day :maxlevel 2 :scope agenda :link t :compact t :formula %
              :step day :fileskip0 t :stepskip0 t :narrow 80
              :properties ("Effort" "CLOCKSUM" "CLOCKSUM_T" "TODO")))
    (org-clock-continuously nil)
    (org-clock-in-switch-to-state "STARTED")
    (org-clock-out-remove-zero-time-clocks t)
    (org-clock-persist t)
    (org-clock-persist-file (expand-file-name (format "%s/emacs/org-clock-save.el" xdg-cache)))
    (org-clock-persist-query-resume nil)
    (org-clock-report-include-clocking-task t)
    (org-show-notification-handler (lambda (msg) (alert msg))))
#+end_src


Being a person with a very low ability to concentrate, I use the =pomodoro=
method to be able to concentrate throughout the day and have deep focus sessions
almost all the time.

Personally, I do sessions of:
- *25 minutes of concentrated work*;
- *5 minutes break*.

Finally, I *take a 30-minute break every two hours*.

To allow this, I use =org-pomodoro= making sure I get that in my status bar:
#+begin_src emacs-lisp
  (use-package org-pomodoro
    :after org
    :custom
    (alert-user-configuration (quote ((((:category . "org-pomodoro")) libnotify nil))))
    (org-pomodoro-audio-player "/usr/bin/mpv")
    (org-pomodoro-finished-sound "~/audio/pomodoro_finished.mp3")
    (org-pomodoro-format " %s")
    (org-pomodoro-killed-sound "~/audio/pomodoro_killed.mp3")
    (org-pomodoro-long-break-sound "~/audio/pomodoro_long.mp3")
    (org-pomodoro-overtime-sound "~/audio/pomodoro_overtime.mp3")
    (org-pomodoro-short-break-sound "~/audio/pomodoro_short.mp3")
    (org-pomodoro-start-sound "~/audio/pomodoro_start.mp3")
    (org-pomodoro-start-sound-p t))
#+end_src

** Contacts

The best solution to maintain your contacts. I tend to use =org-contacts= to
remember their birthdays, so I can be the first to wish them that. Be careful
that to install it, this one is available with =org-plus-contrib=.

#+begin_src emacs-lisp
  (use-package org-contacts
    :ensure nil
    :custom (org-contacts-files '("~/.personal/agenda/contacts.org")))
#+end_src

** Faces

Let's change the foreground and the weight of each keyword.

#+begin_src emacs-lisp
  (use-package org-faces
    :ensure nil
    :custom
    (org-todo-keyword-faces
     '(("DONE"    . (:foreground "#8abeb7" :weight bold))
       ("NEXT"    . (:foreground "#f0c674" :weight bold))
       ("SOMEDAY" . (:foreground "#b294bb" :weight bold))
       ("TODO"    . (:foreground "#b5bd68" :weight bold))
       ("WAITING" . (:foreground "#de935f" :weight bold)))))
#+end_src

** Encryption / Decryption

To be able to enable encryption and decryption of =.gpg= files with =org-mode=,
we will need to install =gnupg2=.

Once this is done, we simply configure =org-crypt= to accept our public key
identifier to allow asymmetric encryption.

*NOTE:* you need to modify the =org-crypt-key= variable to replace my key
identifier, by yours (or =nil= to allow symmetric encryption).

#+begin_src emacs-lisp
  (use-package org-crypt
    :ensure nil
    :init (org-crypt-use-before-save-magic)
    :custom (org-crypt-key "E9AADC36E94A672D1A07D49B208FCDBB98190562"))
#+end_src

** Journal

Recently, I started writing a journal about my daily life as I read that
journals improve mental clarity, help solve problems, improve overall focus,
insight and understanding, track the overall development and facilitate personal
growth.

#+begin_src emacs-lisp
  (use-package org-journal
    :after org
    :bind (("C-c T" . org-journal-new-entry)
           ("C-c Y" . journal-file-yesterday))
    :preface
    (defun get-journal-file-yesterday ()
      "Gets filename for yesterday's journal entry."
      (let* ((yesterday (time-subtract (current-time) (days-to-time 1)))
             (daily-name (format-time-string "%Y%m%d" yesterday)))
        (expand-file-name (concat org-journal-dir daily-name))))

    (defun journal-file-yesterday ()
      "Creates and load a file based on yesterday's date."
      (interactive)
      (find-file (get-journal-file-yesterday)))
    :custom
    (org-journal-date-format "%e %b %Y (%A)")
    (org-journal-dir (format "~/.personal/journal/" (format-time-string "%Y")))
    (org-journal-enable-encryption t)
    (org-journal-file-format "%Y%m%d")
    (org-journal-time-format ""))
#+end_src

** Languages

With that, I can compile many languages with =org-mode=.

#+begin_src emacs-lisp
  (use-package jupyter :ensure nil :after org)
  (use-package python :ensure nil :after org)
  (use-package ob-C :ensure nil :after org)
  (use-package ob-css :ensure nil :after org)
  (use-package ob-ditaa :ensure nil :after org)
  (use-package ob-dot :ensure nil :after org)
  (use-package ob-ein :ensure nil :after org)
  (use-package ob-emacs-lisp :ensure nil :after org)
  (use-package ob-gnuplot :ensure nil :after org)
  (use-package ob-java :ensure nil :after org)
  (use-package ob-js :ensure nil :after org)

  (use-package ob-latex
    :ensure nil
    :after org
    :custom (org-latex-compiler "xelatex"))

  (use-package ob-ledger :ensure nil :after org)
  (use-package ob-makefile :ensure nil :after org)
  (use-package ob-org :ensure nil :after org)

  (use-package ob-plantuml
    :ensure nil
    :after org
    :custom (org-plantuml-jar-path (expand-file-name (format "%s/plantuml.jar" xdg-lib))))

  (use-package ob-python :ensure nil :after org)
  (use-package ob-ruby :ensure nil :after org)
  (use-package ob-shell :ensure nil :after org)
  (use-package ob-sql :ensure nil :after org)
#+end_src
